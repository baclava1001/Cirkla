@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<h3>Notifications here below!</h3>

@foreach (var notification in _notifications)
{
    <li>@notification.Contract.Item, @notification.Contract.StatusChanges.LastOrDefault().To</li>
}

@code {
    private HubConnection? _hubConnection;
    private List<ContractNotification> _notifications = new();

    protected override async Task OnInitializedAsync()
    {
        // Connecting Client to the SignalR Hub
        // Set up and build the SignalR connection to the server
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{ApiAddress.baseAdress}" + "contractNotifications")
            .Build();

        // Method call to receive the message from the server
        _hubConnection.On<ContractNotification>("ReceiveContractUpdate", notification =>
        {
            notification.NotificationMessage = GetNotificationMessage(notification);
            _notifications.Add(notification);

            // Update the UI
            InvokeAsync(StateHasChanged);
        });

        // Start the connection
        await _hubConnection.StartAsync();
    }


    private string GetNotificationMessage(ContractNotification notification)
    {
        var lastStatusChange = notification.Contract.StatusChanges?.LastOrDefault();
        if (lastStatusChange == null)
        {
            return "";
        }

        return $"Status changed to {lastStatusChange.To} by {lastStatusChange.ChangedBy.FirstName} {lastStatusChange.ChangedBy.LastName}.";
    }


    // Dispose of the SignalR connection
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}