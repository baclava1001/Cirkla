@inject NotificationService NotificationService
@inject IClient Client;

<MudBadge Content="_count" Color="Color.Warning" Overlap="true" Visible="IsVisible()">
    <MudMenu Icon="@Icons.Material.Filled.WavingHand" Color="Color.Inherit" Size="Size.Small">
        @if (!NotificationsToDisplay.Any())
        {
            <MudMenuItem Label="No notifications yet"/>
        }

        @foreach (var notification in NotificationsToDisplay)
        {
            <MudLink Href="/inventory" Underline="Underline.None" Color="Color.Default" >
                <MudMenuItem Label="@notification.NotificationMessage" OnClick="async () => await MarkAsRead(notification)"/>
            </MudLink>
        }    
    </MudMenu>
</MudBadge>

@code {
    private List<ContractNotificationForViews> NotificationsToDisplay { get; set; } = new();
    private int _count = 0;


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("UI trying to get notifications from API/DB.");
        try
        {
            var result = await Client.GetNotificationsAsync();
            NotificationsToDisplay = result.Reverse().ToList();
            _count = NotificationsToDisplay.Count(n => n.HasBeenRead is false);
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"Server error: {ex.StatusCode}.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        Console.WriteLine("UI subscribing to NotificationService.OnChange.");
        NotificationService.OnChange += HandleStateChange;
    }

    private async Task MarkAsRead(ContractNotificationForViews notification)
    {
        Console.WriteLine("UI trying to mark notifications as read.");
        if (notification.HasBeenRead is true)
        {
            return;
        }
        try
        {
            await Client.ToggleNotificationMarkAsReadAsync(notification.Id);
            _count--;
            // TODO: Needs some work to update state properly.
            await InvokeAsync(StateHasChanged);
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"Server error: {ex.StatusCode}.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    // TODO: Add toggle read/unread UI-component and method

    public void Dispose()
    {
        Console.WriteLine("UI unsubscribing to NotificationService.OnChange.");
        NotificationService.OnChange -= HandleStateChange;
    }

    private async Task HandleStateChange()
    {
        Console.WriteLine("UI received notification: State changed!");
        NotificationsToDisplay.AddRange(NotificationService.PushNotifications);
        _count += NotificationService.PushNotifications.Count;
        await InvokeAsync(StateHasChanged);
    }

    private bool IsVisible()
    {
        if (_count > 0)
        {
            return true;
        }
        return false;
    }
}