@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<MudMenu Label="Notifications" Color="Color.Inherit" Size="Size.Medium" Variant="Variant.Text">
    @if (!_notifications.Any())
    {
        <MudMenuItem Label="No notifications yet"/>
    }

    @foreach (var notification in _notifications)
    {
        <MudMenuItem Label="@notification.NotificationMessage"/>
    }    
</MudMenu>


@code {
    private HubConnection? _hubConnection;
    private List<ContractNotification> _notifications = new();

    protected override async Task OnInitializedAsync()
    {
        // Connecting Client to the SignalR Hub
        // Set up and build the SignalR connection to the server
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{ApiAddress.baseAdress}" + "contractNotifications")
            .Build();

        // Subscribe to the ReceiveContractUpdate method on the server
        _hubConnection.On<ContractNotification>("ReceiveContractUpdate", notification =>
        {
            _notifications.Add(notification);

            // Update the UI
            InvokeAsync(StateHasChanged);
        });

        // Start the connection
        await _hubConnection.StartAsync();
    }

    // Dispose of the SignalR connection
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}