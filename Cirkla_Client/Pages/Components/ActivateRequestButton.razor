@inject IClient Client;
@inject NavigationManager NavigationManager;

@if (Contract is not null)
{
        <MudButton id="Activate" Buttontype="ButtonType.Button" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="() => ActivateRequest()" Class="ml-2">Activate</MudButton>
}

@code {
    [Parameter]
    public Contract? Contract { get; set; }

    private async Task ActivateRequest()
    {
        ContractUpdateDTO contractUpdateDTO = new()
            {
                Id = Contract.Id,
                UpdatedByUserId = Contract.Owner.Id,
                ItemId = Contract.Item.Id,
                OwnerId = Contract.Owner.Id,
                BorrowerId = Contract.Borrower.Id,
                StartTime = Contract.StartTime,
                EndTime = Contract.EndTime,
                Created = Contract.Created,
                CurrentStatus = ContractStatus.Active,
                LastStatus = Contract.StatusChanges.LastOrDefault().To
            };

        try
        {
            await Client.ApiBorrowingContractActivateRequestAsync(Contract.Id, contractUpdateDTO);
            Console.WriteLine("Button component activated request successfully");
            NavigationManager.NavigateTo("/inventory");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}

