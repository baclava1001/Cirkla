@using Cirkla_Client.ViewModels
@using MudBlazor.Utilities
<div class="container mt-4">
    <div class="row">
        @foreach (var contract in Contracts)
        {
            _timeLineItemViewModels = MapViewModels(contract);
            <div class="col-md-4 mb-4">
                <MudCard Outlined="true" Elevation="25" Style="height: 800px;">
                    <MudCardHeader><MudText Typo="Typo.h6">Borrowing @contract.Item.Name from @contract.Owner.FirstName</MudText></MudCardHeader>
                    <MudCardMedia Height="200" Image="@contract.Item.Pictures.FirstOrDefault().Url"/>
                    <MudTimeline TimelinePosition="TimelinePosition.Start" Modifiers="true" Class="my-4">
                        @foreach (var timeLineItem in _timeLineItemViewModels)
                        {
                            <TimeLineInfoCard TimeLineItemViewModel="timeLineItem" />
                        }
                    </MudTimeline>
                </MudCard>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<Contract>? Contracts { get; set; }
    private List<TimeLineItemVM> _timeLineItemViewModels = new List<TimeLineItemVM>();

    // private async Task<List<TimeLineItemVM>> MapViewModels(Contract contract)
    // {
    //     var requestedEventVM = new TimeLineItemVM
    //     {
    //         Title = ContractMilestone.Request,
    //         IsActive = contract.StatusChanges?.Count == 1 && contract.StatusChanges.First().To == ContractStatus.Pending,
    //         Color = MudBlazor.Color.Success,
    //         ShowInfoCard = true,
    //         InfoCardData = new InfoCardVM
    //         {
    //             Title = "Request",
    //             Content = $"You have requested to borrow {contract.Item} from {contract.Owner}",
    //             Contract = contract
    //         }
    //     };

    //     return _timeLineItemViewModels;
    // }


    // if casegrupp 1
    //    if alternativ 1 - kör metod som matar in data i listan
    //    if alternativ 2 - kör metod som matar in data i listan
    //    if alternativ 3 - kör metod som matar in data i listan

    // if casegrupp 2
    //    if alternativ 1 - kör metod som matar in data i listan
    //    if alternativ 2 - kör metod som matar in data i listan
    //    if alternativ 3 - kör metod som matar in data i listan

    // if casegrupp 3
    //    if alternativ 1 - kör metod som matar in data i listan
    //    if alternativ 2 - kör metod som matar in data i listan
    //    if alternativ 3 - kör metod som matar in data i listan
    //    if alternativ 4 - kör metod som matar in data i listan

    // Alla case:

    // InfoCard 1, 2
    // Om Request och inget annat
    // Om Request && denied (rött, stopp, slut)
    // Om Request && cancelled (rött, stopp, slut)

    // InfoCard 1, 2, 3
    // Om Request && accepted (förbered 3:an)
    // Om Request && accepted && cancelled (rött, stopp, slut)
    // Om Request && accepted && active && cancelled (ej möjligt för Borrower att cancel efter pickupdag)

    // InfoCard 1,2,3,4
    // Om Request && accepted && active
    // Om Request && accepted && active && late (Orange, varningsnotifiering till båda)
    // Om Request && accepted && active && completed
    // Om Request && accepted && active && completed && archived

    private List<TimeLineItemVM> MapViewModels(Contract contract)
    {
        var statusChanges = contract.StatusChanges?.Select(sc => sc.To).ToList() ?? new List<ContractStatus?>();

        return statusChanges switch
        {
            // Case group 1:
            [ContractStatus.Pending] => HandlePending(contract),
            [ContractStatus.Pending, ContractStatus.Denied] => HandleDenied(contract),
            [ContractStatus.Pending, ContractStatus.Cancelled] => HandleCancelled(contract),

            // Case group 2
            [ContractStatus.Pending, ContractStatus.Accepted] => HandleAccepted(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Cancelled] => HandleAcceptedCancelled(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Cancelled] => HandleActiveCancelled(contract),

            // Case group 3
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active] => HandleActive(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Late] => HandleLate(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Completed] => HandleCompleted(contract),
            // [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Completed, ContractStatus.Archived] => HandleArchived(contract),
            // TODO: Add case where late but returned/completed
            // TODO: Add case where problem was reported

            _ => new List<TimeLineItemVM>()
        };
    }


    // New request
    private List<TimeLineItemVM> HandlePending(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You have requested to borrow {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Request denied by owner
    private List<TimeLineItemVM> HandleDenied(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Error,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request denied",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Denied).LastOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.Owner.FirstName} {contract.Owner.LastName} denied your request.",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Cancelled by borrower before reply
    private List<TimeLineItemVM> HandleCancelled(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Error,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request cancelled",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Cancelled).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You cancelled your request to borrow {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Request accepted
    private List<TimeLineItemVM> HandleAccepted(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Accepted).LastOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.Owner.FirstName} {contract.Owner.LastName} accepted your request to borrow {contract.Item}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "Pick up date",
                    EventDate = contract.StartTime.ToShortDateString(),
                    Content = $"Remember to pick up {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName} on {contract.StartTime.ToShortDateString()}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Request accepted and then cancelled av either party
    private List<TimeLineItemVM> HandleAcceptedCancelled(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Accepted).LastOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.Owner.FirstName} {contract.Owner.LastName} accepted your request to borrow {contract.Item.Name}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Error,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "Pick up cancelled",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Cancelled).FirstOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.StatusChanges.Where(s => s.To == ContractStatus.Cancelled).FirstOrDefault().ChangedBy.FirstName} {contract.StatusChanges.Where(s => s.To == ContractStatus.Cancelled).FirstOrDefault().ChangedBy.LastName} cancelled on {contract.StatusChanges.Where(s => s.To == ContractStatus.Cancelled).FirstOrDefault()}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Cancellation after contract start time
    // TODO: Careful with backend logic for handling active status - borrower should not be able to cancel after pickup date without Owner's consent
    private List<TimeLineItemVM> HandleActiveCancelled(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Accepted).LastOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.Owner} accepted your request to borrow {contract.Item.Name}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Error,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "Pick up cancelled",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Cancelled).FirstOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.StatusChanges.Where(s => s.To == ContractStatus.Cancelled).FirstOrDefault().ChangedBy.FirstName} cancelled on {contract.StartTime.ToShortDateString()}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Render active contract
    private List<TimeLineItemVM> HandleActive(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Accepted).LastOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.Owner.FirstName} {contract.Owner.LastName} accepted your request to borrow {contract.Item}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Picked up",
                    EventDate = contract.StartTime.ToShortDateString(),
                    Content = $"You are currently borrowing {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "Return date",
                    EventDate = contract.EndTime.ToShortDateString(),
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Warns about late return
    private List<TimeLineItemVM> HandleLate(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Accepted).LastOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.Owner.FirstName} {contract.Owner.LastName} accepted your request to borrow {contract.Item.Name}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Picked up",
                    EventDate = contract.StartTime.ToShortDateString(),
                    Content = $"You are currently borrowing {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Warning,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Late return",
                    EventDate = contract.EndTime.ToShortDateString(),
                    Content = $"You were supposed to return {contract.Item.Name} to {contract.Owner.FirstName} {contract.Owner.LastName} on {contract.EndTime.ToShortDateString()}",
                    Contract = contract
                }
            }
        };
        return _timeLineItemViewModels;
    }

    private List<TimeLineItemVM> HandleCompleted(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                Title = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Pending).LastOrDefault().ChangedAt.ToString(),
                    Content = $"You requested to borrow {contract.Item.Name} from {contract.Owner}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = contract.StatusChanges.Where(s => s.To == ContractStatus.Accepted).LastOrDefault().ChangedAt.ToString(),
                    Content = $"{contract.Owner.FirstName} {contract.Owner.LastName} accepted your request to borrow {contract.Item.Name}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Pickup.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Picked up",
                    EventDate = contract.StartTime.ToShortDateString(),
                    Content = $"You are currently borrowing {contract.Item.Name} from {contract.Owner.FirstName} {contract.Owner.LastName}",
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                Title = ContractMilestone.Return.ToString(),
                IsActive = true,
                Color = MudBlazor.Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Returned",
                    EventDate = contract.EndTime.ToShortDateString(),
                    Content = $"You've returned {contract.Item.Name} to {contract.Owner.FirstName} {contract.Owner.LastName} on {contract.EndTime.ToShortDateString()}",
                    Contract = contract
                }
            }
        };
        return _timeLineItemViewModels;
    }

    // Archived contracts should not be rendered in the timeline view
    // private List<TimeLineItemVM> HandleArchived(Contract contract)
    // {
    //     // Implement logic for handling archived status
    // }


}