@using Cirkla_Client.ViewModels
@using MudBlazor.Utilities
<div class="container mt-4">
    <div class="row">
        @foreach (var contract in Contracts)
        {
            _timeLineItemViewModels = MapViewModels(contract).Result;
            <div class="col-md-4 mb-4">
                <MudCard Outlined="true" Elevation="25" Style="height: 800px;">
                    <MudCardHeader><MudText Typo="Typo.h6">Borrowing @contract.Item.Name from @contract.Owner.FirstName</MudText></MudCardHeader>
                    <MudCardMedia Height="200" Image="@contract.Item.Pictures.FirstOrDefault().Url"/>
                    <MudTimeline TimelinePosition="TimelinePosition.Start" Modifiers="true" Class="my-4">
                        @foreach (var timeLineItem in _timeLineItemViewModels)
                        {
                            <TimeLineInfoCard TimeLineItemViewModel="timeLineItem" />
                        }
                    </MudTimeline>
                </MudCard>
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public List<Contract>? Contracts { get; set; }
    [Parameter]
    public string UserId { get; set; }
    private List<TimeLineItemVM> _timeLineItemViewModels = new List<TimeLineItemVM>();

    // if casegrupp 1
    //    if alternativ 1 - kör metod som matar in data i listan
    //    if alternativ 2 - kör metod som matar in data i listan
    //    if alternativ 3 - kör metod som matar in data i listan

    // if casegrupp 2
    //    if alternativ 1 - kör metod som matar in data i listan
    //    if alternativ 2 - kör metod som matar in data i listan
    //    if alternativ 3 - kör metod som matar in data i listan

    // if casegrupp 3
    //    if alternativ 1 - kör metod som matar in data i listan
    //    if alternativ 2 - kör metod som matar in data i listan
    //    if alternativ 3 - kör metod som matar in data i listan
    //    if alternativ 4 - kör metod som matar in data i listan

    // Alla case:

    // InfoCard 1, 2
    // Om Request och inget annat
    // Om Request && denied (rött, stopp, slut)
    // Om Request && cancelled (rött, stopp, slut)

    // InfoCard 1, 2, 3
    // Om Request && accepted (förbered 3:an)
    // Om Request && accepted && cancelled (rött, stopp, slut)
    // Om Request && accepted && active && cancelled (ej möjligt för Borrower att cancel efter pickupdag)

    // InfoCard 1,2,3,4
    // Om Request && accepted && active
    // Om Request && accepted && active && late (Orange, varningsnotifiering till båda)
    // Om Request && accepted && active && completed
    // Om Request && accepted && active && completed && archived

    private async Task<List<TimeLineItemVM>> MapViewModels(Contract contract)
    {
        var statusChanges = contract.StatusChanges?.Select(sc => sc.To).ToList() ?? new List<ContractStatus?>();

        return statusChanges switch
        {
            // Case group 1:
            [ContractStatus.Pending] => await HandlePending(contract),
            [ContractStatus.Pending, ContractStatus.Denied] => await HandleDenied(contract),
            [ContractStatus.Pending, ContractStatus.Cancelled] => await HandleCancelled(contract),

            // Case group 2
            [ContractStatus.Pending, ContractStatus.Accepted] => await HandleAccepted(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Cancelled] => await HandleAcceptedCancelled(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Cancelled] => await HandleActiveCancelled(contract),

            // Case group 3
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active] => await HandleActive(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Late] => await HandleLate(contract),
            [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Completed] => await HandleCompleted(contract),
            // [ContractStatus.Pending, ContractStatus.Accepted, ContractStatus.Active, ContractStatus.Completed, ContractStatus.Archived] => HandleArchived(contract),
            // TODO: Add case where late but returned/completed
            // TODO: Add case where problem was reported

            _ => new List<TimeLineItemVM>()
        };
    }


    // New request
    private async Task<List<TimeLineItemVM>> HandlePending(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = nameof(ContractMilestone.Request),
                IsActive = true,
                Color = Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = nameof(ContractMilestone.Reply),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Request denied by owner
    private async Task<List<TimeLineItemVM>> HandleDenied(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = Color.Error,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request denied",
                    EventDate = await ContractStringBuilder.DeniedDate(contract),
                    Content = await ContractStringBuilder.DeniedCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Cancelled by borrower before reply
    private async Task<List<TimeLineItemVM>> HandleCancelled(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = Color.Error,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request cancelled",
                    EventDate = await ContractStringBuilder.CancelledDate(contract),
                    Content = await ContractStringBuilder.CancelledCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Request accepted
    private async Task<List<TimeLineItemVM>> HandleAccepted(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = nameof(ContractMilestone.Request),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = nameof(ContractMilestone.Reply),
                IsActive = true,
                Color = Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = await ContractStringBuilder.AcceptedDate(contract),
                    Content = await ContractStringBuilder.AcceptedCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = nameof(ContractMilestone.Pickup),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Pick up date",
                    EventDate = contract.StartTime.ToString(),
                    Content = await ContractStringBuilder.PickupSoonCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Request accepted and then cancelled av either party - before start date
    private async Task<List<TimeLineItemVM>> HandleAcceptedCancelled(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = nameof(ContractMilestone.Request),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = nameof(ContractMilestone.Reply),
                IsActive = true,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = await ContractStringBuilder.AcceptedDate(contract),
                    Content = await ContractStringBuilder.AcceptedCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = Color.Error,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "Pick up cancelled",
                    EventDate = await ContractStringBuilder.CancelledDate(contract),
                    Content = await ContractStringBuilder.CancelledCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Cancellation after contract start time
    // TODO: Careful with backend logic for handling active status - borrower should not be able to cancel after pickup date without Owner's consent
    private  async Task<List<TimeLineItemVM>> HandleActiveCancelled(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = await ContractStringBuilder.AcceptedDate(contract),
                    Content = await ContractStringBuilder.AcceptedCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = false,
                Color = Color.Error,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "Pick up cancelled",
                    EventDate = await ContractStringBuilder.CancelledDate(contract),
                    Content = await ContractStringBuilder.CancelledCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "",
                    EventDate = "",
                    Content = "",
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Render active contract
    private  async Task<List<TimeLineItemVM>> HandleActive(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = await ContractStringBuilder.AcceptedDate(contract),
                    Content = await ContractStringBuilder.AcceptedCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = true,
                Color = Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Picked up",
                    EventDate = await ContractStringBuilder.ActiveDate(contract),
                    Content = await ContractStringBuilder.ActiveCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = false,
                InfoCardData = new InfoCardVM
                {
                    Title = "Return date",
                    EventDate = contract.EndTime.ToShortDateString(),
                    Content = await ContractStringBuilder.ReturnReminderCardContent(contract, UserId),
                    Contract = null
                }
            }
        };
        return _timeLineItemViewModels;
    }


    // Warns about late return
    private  async Task<List<TimeLineItemVM>> HandleLate(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = await ContractStringBuilder.AcceptedDate(contract),
                    Content = await ContractStringBuilder.AcceptedCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = true,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Picked up",
                    EventDate = await ContractStringBuilder.ActiveDate(contract),
                    Content = await ContractStringBuilder.ActiveCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = true,
                Color = Color.Warning,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Late return",
                    EventDate = contract.EndTime.ToShortDateString(),
                    Content = await ContractStringBuilder.LateCardContent(contract, UserId),
                    Contract = contract
                }
            }
        };
        return _timeLineItemViewModels;
    }


    private  async Task<List<TimeLineItemVM>> HandleCompleted(Contract contract)
    {
        _timeLineItemViewModels = new()
        {
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Request.ToString(),
                IsActive = false,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request",
                    EventDate = await ContractStringBuilder.RequestDate(contract),
                    Content = await ContractStringBuilder.RequestCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Reply.ToString(),
                IsActive = true,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Request accepted",
                    EventDate = await ContractStringBuilder.AcceptedDate(contract),
                    Content = await ContractStringBuilder.AcceptedCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Pickup.ToString(),
                IsActive = true,
                Color = Color.Default,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Picked up",
                    EventDate = await ContractStringBuilder.ActiveDate(contract),
                    Content = await ContractStringBuilder.ActiveCardContent(contract, UserId),
                    Contract = contract
                }
            },
            new TimeLineItemVM
            {
                EventName = ContractMilestone.Return.ToString(),
                IsActive = true,
                Color = Color.Success,
                ShowInfoCard = true,
                InfoCardData = new InfoCardVM
                {
                    Title = "Returned",
                    EventDate = await ContractStringBuilder.CompletedDate(contract),
                    Content = await ContractStringBuilder.CompletedCardContent(contract, UserId),
                    Contract = contract
                }
            }
        };
        return _timeLineItemViewModels;
    }
}