@inject IClient _client;


<div class="d-flex">
    <a href="/inventory" class="btn btn-secondary me-2" type="button">Back</a>
    <button type="button" id="Deny" class="btn btn-danger me-2" @onclick='() => SendReplyToBorrower("Deny")'>Deny(icon)</button>
    <button type="button" id="Accept" class="btn btn-success me-2" @onclick='() => SendReplyToBorrower("Accept")'>Accept(icon)</button>
</div>


@code {
    [CascadingParameter]
    public Contract? Contract { get; set; }

    private async Task SendReplyToBorrower(string buttonName)
    {
        // TODO: Move to mapper
        ContractUpdateDTO contractUpdateDTO = new()
            {
                Id = Contract.Id,
                ItemId = Contract.Item.Id,
                OwnerId = Contract.Owner.Id,
                BorrowerId = Contract.Borrower.Id,
                StartTime = Contract.StartTime,
                EndTime = Contract.EndTime,
                Created = Contract.Created
            };

        try
        {
            if (buttonName == "Deny")
            {
                contractUpdateDTO.CurrentStatus = ContractStatus.Denied;
            }
            else if (buttonName == "Accept")
            {
                contractUpdateDTO.CurrentStatus = ContractStatus.Accepted;
            }
            await _client.ApiBorrowingContractRespondToRequestAsync(Contract.Id, contractUpdateDTO);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
