@inject ToastNotificationService ToastService;

@if (ShowMessage)
{
    <MudAlert Severity="SeverityType"
              ShowCloseIcon="true"
              Class="mt-15">
        @MessageContent
    </MudAlert>
}
@code {
    private bool ShowMessage { get; set; } = false;
    private string MessageContent { get; set; } = string.Empty;
    public int DismissAfter { get; set; } = 3;
    public Severity SeverityType { get; set; }
    private bool _pendingChecked = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_pendingChecked)
        {
            _pendingChecked = true;
            ToastService.TryShowPendingMessage();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ShowMessage && DismissAfter > 0)
        {
            await Task.Delay(DismissAfter * 1000);
            HideMessage();
        }
    }

    protected override void OnInitialized()
    {
        ToastService.OnShow += HandleShow;
        ToastService.OnHide += HideMessage;
    }

    private async Task ShowToast(string message, Severity type, int dismissAfter)
    {
        MessageContent = message;
        SeverityType = type;
        ShowMessage = true;
        await InvokeAsync(StateHasChanged);
        if (dismissAfter > 0)
        {
            await Task.Delay(dismissAfter * 1000);
            HideMessage();
        }
    }

    private void HandleShow(string message, Severity type, int dismissAfter)
    {
        _ = ShowToast(message, type, dismissAfter);
    }

    private void HideMessage()
    {
        ShowMessage = false;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ToastService.OnShow -= HandleShow;
        ToastService.OnHide -= HideMessage;
    }
}