@using System.Text.Json
@using System.Text.Json.Serialization
@inject IClient Client
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Circle?.Name</MudText>
        </CardHeaderContent>
        @* TODO: Show CardHeaderActions only to admins *@
        <CardHeaderActions>
            <MudMenu Icon="@Icons.Material.Filled.Settings">
                <MudMenuItem Label="Members" Icon="@Icons.Material.Filled.People" OnClick="() => EditMemberList()"/>
                <MudMenuItem Label="Edit" Icon="@Icons.Material.Filled.Edit" OnClick="() => EditCircle()"/>
                <MudMenuItem Label="Delete" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteCircle()" />
            </MudMenu>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>@Circle?.Description</MudText>
        <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Person"/> Membership-status (Requested, member, administrator)</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton>Browse</MudButton>
        @* @if(User is not member of this circle && has not sent a request already)*@
        <MudButton OnClick="() => JoinCircle()">Join</MudButton>
        @* @if(User is not member of this circle && has sent a request)*@
        <CircleRequestRevokeButton Circle="Circle"/>
        @* @if(User is member of this circle)*@
        <MudButton OnClick="() => Invite()">Invite</MudButton>
    </MudCardActions>
</MudCard>

@code {
    // TODO: Move all buttons to their own components that can be shown/hidden based on user role and circle membership status

    [Parameter]
    public Circle? Circle { get; set; }

    [Parameter]
    public EventCallback OnCircleDeleted { get; set; }

    private string _tempUserId = "6ce14244-d9f8-417e-b05f-df87f2c044e4";

    private async Task EditCircle()
    {
        if (Circle != null)
        {
            NavigationManager.NavigateTo($"/edit-circle/?id={Circle.Id}");
        }
    }

    private async Task DeleteCircle()
    {
        // TODO: Add an "are you sure?"-message before deleting

        try
        {
            await Client.ApiCircleDeleteAsync(Circle.Id);
            await OnCircleDeleted.InvokeAsync();
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"An API related error occured: {ex}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occured: {ex}");
        }
    }

    private async Task EditMemberList()
    {
        if (Circle != null)
        {
            NavigationManager.NavigateTo($"/circle-administration/?id={Circle.Id}");
        }
    }

    private async Task JoinCircle()
    {
        var request = new CircleRequest
        {
            CircleId = Circle.Id,
            Circle = Circle,
            PendingMemberId = _tempUserId,
            PendingMember = await Client.ApiUserGetAsync(_tempUserId),
            FromUserId = _tempUserId,
            FromUser = await Client.ApiUserGetAsync(_tempUserId),
            RequestType = CircleJoinRequestType.UserRequestToJoin,
            Status = CircleRequestStatus.Pending,
            RequestDate = DateTime.Now,
            ExpiresAt = DateTime.Now + TimeSpan.FromDays(7)
        };
        try
        {
            await Client.ApiCircleRequestUserRequestToJoinAsync(request);
        }
        catch (ApiException ex)
        {
            Console.WriteLine(ex);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task Invite()
    {
        // TODO: Implement this later, when authentication and user management is in place
    }
}