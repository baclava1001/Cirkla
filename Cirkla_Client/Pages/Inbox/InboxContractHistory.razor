@* @page "/inbox/contracthistory" *@
@inject IClient _client;
@inject ComponentNotificationService _componentNotificationService;
@implements IDisposable;

<PageTitle>Contract history</PageTitle>
<h4 class="mt-3">Contract history</h4>


@if (MyContractHistory is null)
{
    <p class="mt-4"><em>Loading...</em></p>
}
else if (!MyContractHistory.Any())
{
    <p class="mt-4"><em>Nothing to see here at the moment</em></p>
}
else
{
    <div class="overflow-auto">
        <QuickGrid Class="table table-hover table-striped mt-3" Items="MyContractHistory" Pagination="pagination" @onchange="StateHasChanged">
            <TemplateColumn Title="From">
                <ChildContent>
                    <span>@context.Borrower.FirstName @context.Borrower.LastName</span>
                </ChildContent>
            </TemplateColumn>
            <PropertyColumn Property="contract => contract.Borrower.ZipCode" Title="Zip code" Sortable="true" />
            <PropertyColumn Property="contract => contract.Item.Name" Title="Item" Sortable="true" />
            <PropertyColumn Property="contract => contract.StartTime.ToShortDateString()" Title="Start date" Sortable="true" />
            <PropertyColumn Property="contract => contract.EndTime.ToShortDateString()" Title="End date" Sortable="true" />
            <PropertyColumn Property="contract => contract.Created.ToShortDateString()" Title="Request sent" Sortable="true" />
            <TemplateColumn Context="contract" Title="">
                <img src="@contract.Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @contract.Item.Name" class="img-thumbnail" />
            </TemplateColumn>
            <TemplateColumn Context="contract" Title="Status">
                @if (contract.EndTime > DateTime.Now && contract.AcceptedByOwner is not null)
                {
                    <span>Active</span>
                }
                else
                {
                    <span>Archived</span>
                }
            </TemplateColumn>
        </QuickGrid>
    </div>

    <Paginator State="pagination" />
}



@code {
    private IQueryable<Contract>? MyContractHistory { get; set; }
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private string tempUserId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; // Liza, hardcoded.

    protected override async Task OnInitializedAsync()
    {
        await GetAndFilterContracts();
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        _componentNotificationService.OnNotify += TriggerRerender;
    }

    private async Task GoToPageAsync(int pageIndex) => await pagination.SetCurrentPageIndexAsync(pageIndex);

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;


    private async Task GetAndFilterContracts()
    {
        var contractsFromAPI = await _client.ApiInboxMyContractHistoryAsync(tempUserId); // TODO: Send in logged in user's id.
        MyContractHistory = contractsFromAPI.AsQueryable();
    }


    private async void TriggerRerender()
    {
        await GetAndFilterContracts(); // Reload data
        await InvokeAsync(StateHasChanged); // Nudge component to rerender
    }


    public void Dispose()
    {
        _componentNotificationService.OnNotify -= StateHasChanged;
    }
}
