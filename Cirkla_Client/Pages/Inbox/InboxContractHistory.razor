@inject IClient _client;
@inject ComponentNotificationService _componentNotificationService;


@if (MyPendingRequests is null)
{
    <p><em>Loading...</em></p>
}
<h4 class="mt-3">Contract history</h4>
<div class="overflow-auto">
    <QuickGrid Class="table table-hover table-striped mt-3" Items="MyPendingRequests" Pagination="pagination" @onchange="StateHasChanged">
        <TemplateColumn Title="From">
            <ChildContent>
                <span>@context.Borrower.FirstName @context.Borrower.LastName</span>
            </ChildContent>
        </TemplateColumn>
        <PropertyColumn Property="request => request.Borrower.ZipCode" Title="Zip code" Sortable="true" />
        <PropertyColumn Property="request => request.Item.Name" Title="Item" Sortable="true" />
        <PropertyColumn Property="request => request.StartTime.ToShortDateString()" Title="Start date" Sortable="true" />
        <PropertyColumn Property="request => request.EndTime.ToShortDateString()" Title="End date" Sortable="true" />
        <PropertyColumn Property="request => request.Created.ToShortDateString()" Title="Request sent" Sortable="true" />
        <TemplateColumn Context="request" Title="">
            <img src="@request.Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @request.Item.Name" class="img-thumbnail" />
        </TemplateColumn>
        <TemplateColumn Context="request" Title="Status" >
            @if(request.EndTime > DateTime.Now)
            {
                <span>Active</span>
            }
            else
            {
                <span>Archived</span>
            }
        </TemplateColumn>
    </QuickGrid>
</div>

<div class="page-buttons mb-5">
    Page:
    @if (pagination.TotalItemCount.HasValue)
    {
        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
        {
            var capturedIndex = pageIndex;
            <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                    class="@PageButtonClass(capturedIndex)"
                    aria-current="@AriaCurrentValue(capturedIndex)"
                    aria-label="Go to page @(pageIndex + 1)">
                @(pageIndex + 1)
            </button>
        }
    }
</div>

@code {
    // TODO: Change to List and convert inside Quickgrid!
    IQueryable<Contract>? MyPendingRequests;

    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    string tempUserId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; // Liza, hardcoded.

    protected override async Task OnInitializedAsync()
    {
        var requestsFromAPI = await _client.ApiBorrowingRequestsToInboxAsync(tempUserId); // TODO: Send in logged in user's id.

        // TODO: Create an inbox controller with an endpoint that takes two inputs and returns the right requests/contracts to each component
        MyPendingRequests = requestsFromAPI.Where(r => r.Borrower.Id == tempUserId || r.Owner.Id == tempUserId).Where(r => r.EndTime < DateTime.Now).OrderBy(r => r.Created).AsQueryable();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();

        _componentNotificationService.OnNotify += StateHasChanged;
    }


    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private void Dispose()
    {
        _componentNotificationService.OnNotify -= StateHasChanged;
    }
}
