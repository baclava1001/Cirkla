@* @page "/inbox/mypendingrequests" *@
@inject IClient _client;


<PageTitle>My pending requests</PageTitle>
<h4 class="mt-3">My pending requests</h4>

@if (MyPendingRequests is null)
{
    <p class="mt-4"><em>Loading...</em></p>
}
else if (!MyPendingRequests.Any())
{
    <p class="mt-4"><em>Nothing to see here at the moment</em></p>
}
else
{
    <div class="overflow-auto">
        <QuickGrid Class="table table-hover table-striped mt-3" Items="MyPendingRequests" Pagination="pagination" @onchange="StateHasChanged">
            <TemplateColumn Title="From">
                <ChildContent>
                    <span>@context.Borrower.FirstName @context.Borrower.LastName</span>
                </ChildContent>
            </TemplateColumn>
            <PropertyColumn Property="request => request.Borrower.ZipCode" Title="Zip code" Sortable="true" />
            <PropertyColumn Property="request => request.Item.Name" Title="Item" Sortable="true" />
            <PropertyColumn Property="request => request.StartTime.ToShortDateString()" Title="Start date" Sortable="true" />
            <PropertyColumn Property="request => request.EndTime.ToShortDateString()" Title="End date" Sortable="true" />
            <PropertyColumn Property="request => request.Created.ToShortDateString()" Title="Request sent" Sortable="true" />
            <TemplateColumn Context="request" Title="">
                <img src="@request.Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @request.Item.Name" class="img-thumbnail" />
            </TemplateColumn>
        </QuickGrid>
    </div>

    <Paginator State="pagination" />
}

@code {
    IQueryable<Contract>? MyPendingRequests;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    string tempUserId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; // Liza, hardcoded.
    [Parameter]
    public EventCallback<int> OnNumberOfAnsweredChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var requestsFromAPI = await _client.ApiInboxMyAnsweredRequestsAsync(tempUserId); // TODO: Send in logged in user's id.

        MyPendingRequests = requestsFromAPI.AsQueryable();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();

        OnNumberOfAnsweredChanged.InvokeAsync(requestsFromAPI.Count());
    }


    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
