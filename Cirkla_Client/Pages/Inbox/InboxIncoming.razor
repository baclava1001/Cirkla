@* @page "/inbox/incomingrequests" *@
@inject IClient _client;
@inject ComponentNotificationService _componentNotificationService;

<PageTitle>Incoming</PageTitle>
<h4 class="mt-3 mb-3">Incoming requests</h4>


@if(IncomingRequests is null)
{
    <p class="mt-4"><em>Loading...</em></p>
}
else if(!IncomingRequests.Any())
{
    <p class="mt-4"><em>Nothing to see here at the moment</em></p>
}
else
{

@if (!string.IsNullOrEmpty(tempMessage))
{
<p class="@messageClass mt-3 mb-3">@tempMessage</p>
}
<div class="overflow-auto">
    <QuickGrid Class="table table-hover table-striped" Items="IncomingRequests" Pagination="pagination">
        <TemplateColumn Title="From">
            <ChildContent>
                <span>@context.Borrower.FirstName @context.Borrower.LastName</span>
            </ChildContent>
        </TemplateColumn>
        <PropertyColumn Property="request => request.Borrower.ZipCode" Title="Zip code" Sortable="true" />
        <PropertyColumn Property="request => request.Item.Name" Title="Item" Sortable="true" />
        <PropertyColumn Property="request => request.StartTime.ToShortDateString()" Title="Start date" Sortable="true" />
        <PropertyColumn Property="request => request.EndTime.ToShortDateString()" Title="End date" Sortable="true" />
        <PropertyColumn Property="request => request.Created.ToShortDateString()" Title="Request sent" Sortable="true" />
        <TemplateColumn Context="request" Title="">
            <img src="@request.Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @request.Item.Name" class="img-thumbnail" />
        </TemplateColumn>
        <TemplateColumn>
            <div class="d-flex justify-content-between">
                <button type="button" id="Deny" class="btn btn-danger me-1" @onclick='() => SendReplyToBorrower("Deny", context)'><i class="fa-solid fa-xmark" /></button>
                <button type="button" id="Accept" class="btn btn-success me-1" @onclick='() => SendReplyToBorrower("Accept", context)'><i class="fa-solid fa-check" /></button>
                <a href="/request/review?id=@context.Id" type="button" class="btn btn-secondary me-1"><i class="fa-solid fa-align-left" /></a>
            </div>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="pagination" />
}



@code {
    private IQueryable<Contract>? IncomingRequests { get; set; }
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private string? tempMessage;
    private string? messageClass;
    private string tempUserId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; // Liza, hardcoded.

    // Declare eventcallback ("Walkie-talkie-channel")
    [Parameter]
    public EventCallback<int> OnNumberOfRequestsChanged { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetAndFilterRequests();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }


    private async Task SendReplyToBorrower(string buttonName, Contract contract)
    {
        // TODO: Move this block to mapper
        ContractReplyDTO contractReplyDTO = new()
            {
                Id = contract.Id,
                ItemId = contract.Item.Id,
                OwnerId = contract.Owner.Id,
                BorrowerId = contract.Borrower.Id,
                StartTime = contract.StartTime,
                EndTime = contract.EndTime,
                Created = contract.Created
            };

        try
        {
            if (buttonName == "Deny")
            {
                contractReplyDTO.DeniedByOwner = DateTime.Now;
            }
            else if (buttonName == "Accept")
            {
                contractReplyDTO.AcceptedByOwner = DateTime.Now;
            }
            await _client.ApiBorrowingRespondToRequestAsync(contract.Id, contractReplyDTO);

            await GetAndFilterRequests();

            tempMessage = $"You have responded {buttonName} to the request from {contract.Borrower.FirstName} {contract.Borrower.LastName}";
            messageClass = "text-success";
        }
        catch (Exception ex)
        {
            tempMessage = $"An error occurred: {ex.Message}";
            messageClass = "text-danger";
        }        
    }


    // TODO: Do this server side: Create an inbox controller with an endpoint that takes two inputs and returns the right requests/contracts to each inbox-component
    private async Task GetAndFilterRequests()
    {
        var requestsFromAPI = await _client.ApiInboxRequestsToInboxAsync(tempUserId); // TODO: Send in logged in user's id.
        // Notify parent with "Walkie talkie"
        OnNumberOfRequestsChanged.InvokeAsync(requestsFromAPI.Count());
        IncomingRequests = requestsFromAPI.AsQueryable();
        
        StateHasChanged();

        _componentNotificationService.NotifyStateChanged(); // Notify InboxContractHistory component whenever this component rerenders
    }


    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
