@page "/borrowitem/"
@inject IClient _client;


<PageTitle>Details for @Item.Name</PageTitle>
<h3>Details for @Item.Name</h3>
<hr />

<div>   
    @if (Item is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <img src="@Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @Item.Name" class="img-fluid" style="width: 350px; height: auto;" />
        <br />
        <br />
        <dl class="row">
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@Item.Category</dd>
            <dt class="col-sm-2">Model</dt>
            <dd class="col-sm-10">@Item.Model</dd>
            <dt class="col-sm-2">Specifications</dt>
            <dd class="col-sm-10">@Item.Specifications</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Item.Description</dd>
            <dt class="col-sm-2">Owner</dt>
            <dd class="col-sm-10">@Item.Owner?.FirstName @Item.Owner?.LastName</dd>
        </dl>
        <button class="btn btn-primary me-2" type="button" @onclick="(() => AskToBorrow())">Cirkla!</button>
    }
    @if(!string.IsNullOrEmpty(tempMessage))
    {
        <p class="text-success">@tempMessage</p>
    }
</div>


@code {
    // TODO: Add more pictures in this view
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [Parameter]
    public Item Item { get; set; } = new();

    string tempMessage;

    protected override async Task OnInitializedAsync()
    {
        Item = await _client.ApiItemGetAsync(Id);
    }

    // TODO: Refactor this
    public async Task AskToBorrow()
    {
        Contract contract = new()
            {
                Id = 1,
                BorrowerId = "e273ab8d-7a57-4de3-88f5-7e53623764c0", // Luke, hardcoded
                ItemId = Item.Id,
                OwnerId = Item.OwnerId,
                StartTime = DateTimeOffset.Now,
                EndTime = DateTimeOffset.Now.AddDays(30),
                Created = DateTimeOffset.Now
            };
        try
        {
            var response = await _client.ApiBorrowingAsync(contract);
        }
        catch (ApiException ex)
        {
            tempMessage = ex.StatusCode.ToString();
        }

        // tempMessage = response.ToString();
        // if(response.IsSuccessStatusCode)
        // {
        //     tempMessage = $"Your borrowing request was sent successfully to the owner of {Item.Name}";
        // }
    }
}

