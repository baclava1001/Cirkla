@page "/circlesoverview"
@using Cirkla_Client.Pages.Components;
@inject IClient Client;

<PageTitle>Circles overview</PageTitle>

<MudGrid>
    <MudItem>
        <MudText Typo="Typo.h2">Circles overview</MudText>
    </MudItem>
    <MudItem>
        <MudButton
        id="Add"
        ButtonType="ButtonType.Button"
        Color="Color.Tertiary"
        Variant="Variant.Filled"
        StartIcon="@Icons.Material.Filled.Add"
        Class="ma-6"
        Href="/createcircle">New Circle</MudButton>
    </MudItem>
</MudGrid>


<MudGrid>
    @if (Circles is null || Circles.Any() is false)
    {
        <MudItem>
            <MudText>No circles to show</MudText>
        </MudItem>
    }
    else
    {
        foreach (var circle in Circles)
        {
            if (circle is not null)
            {
                <MudItem>
                    <MudText>@circle.Name</MudText>
                    <CircleCard Circle="circle" OnCircleDeleted="HandleCircleDeleted" />
                </MudItem>
            }
        }
    }
</MudGrid>

@code {
    public List<Circle>? Circles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCircles();
    }


    private async Task HandleCircleDeleted()
    {
        await LoadCircles();
        await InvokeAsync(StateHasChanged);
    }


    private async Task LoadCircles()
    {
        try
        {
            var result = await Client.ApiCircleGetAsync();
            Circles = result.ToList();
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"Something went wrong: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Something went wrong: {ex.Message}");
        }
    }
}
