@inject IClient Client;
@inject CurrentUserService CurrentUser;
@inject SnackbarService SnackbarService;

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.body2">Select a user to invite to the circle</MudText>
        <MudRadioGroup @bind-Value="SelectedUser" Orientation="Orientation.Vertical">
            @if (AppUsers != null)
            {
                foreach (var user in AppUsers)
                {
                    <MudRadio Value="@user" Label="@user.FullName" UncheckedColor="Color.Default" Color="Color.Tertiary"/>
                    <MudDivider />
                }
            }
        </MudRadioGroup>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="Invite">Invite</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }
    [Parameter]
    public Circle? Circle { get; set; }

    private IEnumerable<User>? AppUsers;
    public User? SelectedUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var users = await Client.GetAllUsersAsync();
        AppUsers = users.OrderBy(u => u.FirstName).ThenBy(u => u.LastName);
    }

    private async Task Invite()
    {
        if (SelectedUser is null)
        {
            Cancel();
        }
        var joinRequest = new CircleJoinRequestCreateDTO
        {
            CircleId = Circle.Id,
            Type = CircleJoinRequestType.JoinAsMember,
            TargetUserId = SelectedUser.Id,
            FromUserId = await CurrentUser.GetUserId(),
            Status = CircleRequestStatus.Pending,
            RequestDate = DateTime.Now,
            ExpiresAt = DateTime.Now.AddDays(7),

        };
        await Client.SendJoinRequestAsync(joinRequest);
        SnackbarService.Success($"Sent invitation to {SelectedUser.FullName}");
        MudDialog.Close();
    }

    private void Cancel() => MudDialog.Cancel();
}