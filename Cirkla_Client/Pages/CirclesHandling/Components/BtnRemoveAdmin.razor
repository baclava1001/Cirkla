@using System.Text.Json
@inject IClient Client;
@inject SnackbarService SnackbarService;
@inject CurrentUserService CurrentUser;

<MudButton
ButtonType="ButtonType.Button"
OnClick="() => RemoveAdmin()"
Color="Color.Primary"
Variant="Variant.Filled"
StartIcon="@Icons.Material.Filled.RemoveModerator"
Size="Size.Small"
Class="ml-auto">Remove admin</MudButton>

@code {
    [Parameter]
    public Circle? Circle { get; set; }
    [Parameter]
    public User Member { get; set; }
    // Event callback to trigger rerender of parent component
    [Parameter]
    public EventCallback OnAdminRemoved { get; set; }  

    private async Task RemoveAdmin()
    {
        try
        {
            var request = new CircleJoinRequestCreateDTO
            {
                Type = CircleJoinRequestType.JoinAsAdmin,
                CircleId = Circle.Id,
                TargetUserId = Member.Id,
                FromUserId = await CurrentUser.GetUserId(),
                Status = CircleRequestStatus.Accepted,
                RequestDate = DateTime.Now,
                ExpiresAt = DateTime.Now + TimeSpan.FromDays(7),
                UpdatedByUserId = await CurrentUser.GetUserId()
            };
            await Client.MembershipRequestsUserRemoveAdminAsync(request.TargetUserId, request);
            SnackbarService.Success($"{Member.FullName} is no longer an admin for {Circle.Name}");
            await OnAdminRemoved.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            SnackbarService.Error($"Couldn't remove administrator");
        }
    }
}