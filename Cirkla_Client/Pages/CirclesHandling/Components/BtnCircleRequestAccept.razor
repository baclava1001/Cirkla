@using System.Text.Json
@using Mapping.Mappers
@inject IClient Client;

<MudButton
ButtonType="ButtonType.Button"
OnClick="() => AcceptJoinRequest()"
Color="Color.Tertiary"
Variant="Variant.Filled"
StartIcon="@Icons.Material.Filled.Check"
Size="Size.Small"
Class="ml-auto">Accept</MudButton>

@code {
    [Parameter]
    public Circle? Circle { get; set; }

    [Parameter] // Will be populated if coming from Admin view (CircleRequestList component)
    public CircleJoinRequest? Request { get; set; }

    private string _tempUserId = "6ce14244-d9f8-417e-b05f-df87f2c044e4"; // Kalle Kanin
    //private string _tempAcceptingId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; // Liza Minelli
    private string _tempAcceptingId = "54b5627b-1f8e-4634-8bb0-206fecc840f3"; //Samed

    private async Task AcceptJoinRequest()
    {
        try
        {
            if (Request is null)
            {
                var userRequests = await Client.MembershipRequestsUserAsync(_tempUserId);
                Request = userRequests.FirstOrDefault(r => r.CircleId == Circle?.Id);
            }

            if (Request?.Status is not CircleRequestStatus.Pending)
            {
                Console.WriteLine("Request not valid.");
                // TODO: Show message
                return;
            }


            Request.UpdatedByUserId = _tempAcceptingId;
            var requestUpdateDTO = await Mapper.MapToCircleRequestUpdateDTO(Request);
            await Client.MembershipRequestsAcceptAsync(requestUpdateDTO.Id, requestUpdateDTO);
        }
        catch (ApiException ex)
        {
            Console.WriteLine(ex);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}