@using System.Text.Json
@using Mapping.Mappers
@inject IClient Client;
@inject SnackbarService SnackbarService;
@inject CurrentUserService CurrentUser;

<MudButton
ButtonType="ButtonType.Button"
OnClick="() => AcceptJoinRequest()"
Color="Color.Tertiary"
Variant="Variant.Filled"
StartIcon="@Icons.Material.Filled.Check"
Size="Size.Small"
Class="ml-auto">Accept</MudButton>

@code {
    [Parameter]
    public Circle? Circle { get; set; }

    [Parameter]
    public CircleJoinRequest? Request { get; set; }

    private async Task AcceptJoinRequest()
    {
        try
        {
            if (Request is null)
            {
                // Fetch all requests belonging to the logged in user
                var userRequests = await Client.MembershipRequestsUserAsync(await CurrentUser.GetUserId());
                // Single out the request to join this particular Circle
                Request = userRequests.FirstOrDefault(r => r.CircleId == Circle?.Id);
            }

            if (Request?.Status is not CircleRequestStatus.Pending)
            {
                Console.WriteLine("Request not valid.");
                SnackbarService.Error("Request not valid");
                return;
            }


            Request.UpdatedByUserId = await CurrentUser.GetUserId();
            var requestUpdateDTO = await Mapper.MapToCircleRequestUpdateDTO(Request);
            await Client.MembershipRequestsAcceptAsync(requestUpdateDTO.Id, requestUpdateDTO);
        }
        catch (Exception ex)
        {
            SnackbarService.Error("Couldn't accept join request");
            Console.WriteLine(ex);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}