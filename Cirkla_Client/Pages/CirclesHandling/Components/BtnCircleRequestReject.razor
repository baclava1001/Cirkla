@using Cirkla.Shared.Mappers
@inject IClient Client;
@inject SnackbarService SnackbarService;
@inject CurrentUserService CurrentUser;

<MudButton
ButtonType="ButtonType.Button"
OnClick="() => RejectJoinRequest()"
Color="Color.Error"
Variant="Variant.Filled"
StartIcon="@Icons.Material.Filled.Delete"
Size="Size.Small"
Class="ml-auto">Reject</MudButton>

@code {
    [Parameter]
    public Circle? Circle { get; set; }

    [Parameter] // Will be populated if coming from Admin view (CircleRequestList component)
    public CircleJoinRequest? Request { get; set; }

    private async Task RejectJoinRequest()
    {
        try
        {
            if (Request is null)
            {
                var userRequests = await Client.MembershipRequestsUserCircleAsync(await CurrentUser.GetUserId(), Circle.Id);
                Request = userRequests.LastOrDefault();
            }

            if (Request?.Status is not CircleRequestStatus.Pending)
            {
                Console.WriteLine("Request status not valid.");
                SnackbarService.Error("Request not valid");
                return;
            }

            Request.UpdatedByUserId = await CurrentUser.GetUserId();
            var requestUpdateDTO = await Mapper.MapToCircleRequestUpdateDTO(Request);
            await Client.MembershipRequestsRejectAsync(requestUpdateDTO.Id, requestUpdateDTO);
        }
        catch (ApiException ex)
        {
            Console.WriteLine(ex);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            SnackbarService.Error("Couldn't reject join request");
        }
    }
}