@using System.Text.Json
@using System.Text.Json.Serialization
@inject IClient Client
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Circle?.Name</MudText>
        </CardHeaderContent>
        @* TODO: Show CardHeaderActions only to admins *@
        <CardHeaderActions>
            <MudMenu Icon="@Icons.Material.Filled.Settings">
                <MudMenuItem Label="Members" Icon="@Icons.Material.Filled.People" OnClick="() => EditMemberList()"/>
                <MudMenuItem Label="Edit" Icon="@Icons.Material.Filled.Edit" OnClick="() => EditCircle()"/>
                <MudMenuItem Label="Delete" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteCircle()" />
            </MudMenu>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>@Circle?.Description</MudText>
        <MudText Typo="Typo.caption"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Person"/> @_userMembershipStatus</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton>Browse</MudButton>
        <CircleJoinButton Circle="Circle"/>
        <CircleInviteButton Circle="Circle"/>
        <CircleRequestRevokeButton Circle="Circle"/>
        <CircleRequestRejectButton Circle="@Circle"/>
        <CircleRequestAcceptButton Circle="@Circle" />
    </MudCardActions>
</MudCard>

@code {
    // TODO: Move all buttons to their own components that can be shown/hidden based on user role and circle membership status

    [Parameter]
    public Circle? Circle { get; set; }

    [Parameter]
    public EventCallback OnCircleDeleted { get; set; }

    private string _userMembershipStatus = "";
    private string _tempUserId = "6ce14244-d9f8-417e-b05f-df87f2c044e4";


    protected override async Task OnInitializedAsync()
    {
        _userMembershipStatus = await UserMembershipStatus();
    }

    private async Task EditCircle()
    {
        if (Circle != null)
        {
            NavigationManager.NavigateTo($"/edit-circle/?id={Circle.Id}");
        }
    }

    private async Task DeleteCircle()
    {
        // TODO: Add an "are you sure?"-message before deleting

        try
        {
            await Client.ApiCircleDeleteAsync(Circle.Id);
            await OnCircleDeleted.InvokeAsync();
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"An API related error occured: {ex}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occured: {ex}");
        }
    }

    private async Task EditMemberList()
    {
        if (Circle != null)
        {
            NavigationManager.NavigateTo($"/circle-administration/?id={Circle.Id}");
        }
    }
    

    private async Task<string> UserMembershipStatus()
    {
        var tempLoggedInUser = await Client.ApiUserGetAsync(_tempUserId);
        var userJoinRequests = await Client.MembershipRequestsUserAsync(_tempUserId);
        var joinRequest = userJoinRequests.FirstOrDefault(jr => jr.Circle?.Id == Circle?.Id);
        if (Circle != null && Circle.Administrators.Contains(tempLoggedInUser))
        {
            return "You are an administrator";
        }
        if (Circle.Members != null && Circle.Members.Contains(tempLoggedInUser))
        {
            return "You are a member";
        }
        if (joinRequest?.Type == CircleJoinRequestType.JoinAsMember)
        {
            return "Waiting for membership";
        }
        if (joinRequest?.Type == CircleJoinRequestType.JoinAsAdmin)
        {
            return "Waiting for admin status";
        }
        return "Not a member";
    }
}