@page "/request/view"
@inject IClient _client;
@inject NavigationManager _navigationManager;


<PageTitle>Request summary</PageTitle>
<h3>Request summary @requestNumber</h3>
<hr />

<div>
    @if (Contract is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <img src="@Contract.Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @Contract?.Item?.Name" class="img-fluid" style="width: 350px; height: auto;" />
        <br />
        <br />
        <dl class="row">
            <dt class="col-sm-2">Cirkla member</dt>
            <dd class="col-sm-10">@Contract?.Borrower.FirstName @Contract?.Borrower.LastName</dd>
            <dt class="col-sm-2">Requests to borrow</dt>
            <dd class="col-sm-10">@Contract?.Item.Name @Contract?.Item.Model</dd>
            <dt class="col-sm-2">From Cirkla member</dt>
            <dd class="col-sm-10">@Contract?.Owner.FirstName @Contract?.Owner.LastName</dd>
            <dt class="col-sm-2">From</dt>
            <dd class="col-sm-10">@Contract?.StartTime</dd>
            <dt class="col-sm-2">To</dt>
            <dd class="col-sm-10">@Contract?.EndTime</dd>
            <dt class="col-sm-2">Under the following conditions</dt>
            <dd class="col-sm-10">(Coming feature, not yet implemented)</dd>
@*             @{
                var a = Contract?.AcceptedByOwner ?? Contract?.DeniedByOwner;
                {
                <dt class="col-sm-2">Status</dt>
                <dd class="col-sm-10"></dd>
            }
            } *@
        </dl>
        <div class="d-flex">
            <a href="/inventory" class="btn btn-secondary me-2" type="button">Back</a>
            <button type="button" id="Deny" class="btn btn-danger me-2" @onclick='() => SendReplyToBorrower("Deny", Contract.Id)'>Deny(icon)</button>
            <button type="button" id="Accept" class="btn btn-success me-2" @onclick='() => SendReplyToBorrower("Accept", Contract.Id)'>Accept(icon)</button>
        </div>
    }
    @if(!string.IsNullOrEmpty(tempMessage))
    {
        <p class="@messageClass mt-3">@tempMessage</p>
    }
</div>


@code {
    // TODO: Finalized contract (accepted and active, or archived or denied) should lead to another, more static view, with no controls

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public Contract? Contract { get; set; }

    string requestNumber;
    string? tempMessage;
    string? messageClass;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(Id);
        try
        {
            Contract = await _client.ApiBorrowingViewRequestAsync(Id);
            requestNumber = $"#{Contract.Id}";
        }
        catch(ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                messageClass = "text-success";
                tempMessage = "Here's the request!";
            }
            else if (ex.StatusCode == 404)
            {
                _navigationManager.NavigateTo("/notfound");
            }
            else
            {
                messageClass = "text-danger";
                tempMessage = ex.Message.ToString();
            }
        }
    }

    private async Task SendReplyToBorrower(string buttonName, int contractId)
    {
        Contract contract = await _client.ApiBorrowingViewRequestAsync(contractId);


        // TODO: Move to mapper
        ContractReplyDTO contractReplyDTO = new()
            {
                Id = contract.Id,
                ItemId = contract.Item.Id,
                OwnerId = contract.Owner.Id,
                BorrowerId = contract.Borrower.Id,
                StartTime = contract.StartTime,
                EndTime = contract.EndTime,
                Created = contract.Created
            };

        try
        {
            if (buttonName == "Deny")
            {
                contractReplyDTO.DeniedByOwner = DateTime.Now;
            }
            else if (buttonName == "Accept")
            {
                contractReplyDTO.AcceptedByOwner = DateTime.Now;
            }
            await _client.ApiBorrowingRespondToRequestAsync(contractId, contractReplyDTO);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}

