@attribute [Authorize]
@page "/items/{itemId:int}"
@using Cirkla_Client.Pages.Inventory.Components;
@inject IClient Client;
@inject NavigationManager NavigationManager;
@inject SnackbarService SnackbarService;

<PageTitle>Details for @Item?.Name</PageTitle>
<h3>Details for @Item?.Name</h3>
<hr />

<div>
    @if (Item is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <MudCarousel ItemsSource="@Item.Pictures" Style="height: 300px; max-width: 500px;" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false">
            <ItemTemplate>
                <MudImage Style="width: 500px;" ObjectFit="ObjectFit.Contain" Src="@context.Url" Alt="@AltText()" />
            </ItemTemplate>
        </MudCarousel>

        <br />
        <dl class="row">
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@Item.Category</dd>
            <dt class="col-sm-2">Model</dt>
            <dd class="col-sm-10">@Item.Model</dd>
            <dt class="col-sm-2">Specifications</dt>
            <dd class="col-sm-10">@Item.Specifications</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Item.Description</dd>
            <dt class="col-sm-2">Owner</dt>
            <dd class="col-sm-10">@Item.Owner?.FirstName @Item.Owner?.LastName</dd>
            <dt class="col-sm-2">Zip code</dt>
            <dd class="col-sm-10">@Item.Owner?.ZipCode</dd>
        </dl>
        <MudGrid Spacing="3" Class="d-flex flex-column flex-sm-row align-content-end">
            <MudItem>
                <a href="/my-inventory"><input class="btn btn-secondary" type="button" value="Back" style="min-width: 150px;"/></a>
            </MudItem>
            <MudItem>
                <BtnDeleteItem Item="Item"/>
            </MudItem>
            <MudItem>
                <BtnEditItem Item="Item"/>
            </MudItem>
        </MudGrid>
    }
</div>


@code {
    [Parameter]
    public int ItemId { get; set; } //Item id from http-query

    public Item? Item { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await Client.ApiItemGetAsync(ItemId);
        }
        catch (Exception ex)
        {
            SnackbarService.Error("Couldn't load item");
        }
    }

    private string AltText()
    {
        return $"Image of {Item?.Name}";
    }
}

