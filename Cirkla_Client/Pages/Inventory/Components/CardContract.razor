@inject NavigationManager NavigationManager;
@inject CurrentUserService CurrentUser;

<MudCard Elevation="2">
    <MudCarousel ItemsSource="Contract?.Item?.Pictures" Style="height: 200px" ShowBullets="false" ShowArrows="_showArrows" EnableSwipeGesture="true" AutoCycle="false">
        <ItemTemplate>
            <MudCardMedia Height="200" Image="@context.Url" Alt="@AltText()" />
        </ItemTemplate>
    </MudCarousel>
    <MudCardContent>
        <MudText Typo="Typo.h5" Class="text-truncate">@Contract?.Item?.Name</MudText>
        <MudText Typo="Typo.body2" Class="text-truncate">@_cardContent</MudText>
        <MudText Typo="Typo.body2" Class="text-truncate">Last update: @Contract?.StatusChanges?.Last().ChangedAt.ToShortDateString()</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudSpacer/>
        <MudButton @onclick="NavigateToSummary" Variant="Variant.Text" Color="Color.Tertiary">Summary</MudButton>
    </MudCardActions>
</MudCard>


@code {
    [Parameter]
    public Contract? Contract { get; set; }
    private string _cardContent = string.Empty;
    private bool _showArrows;

    private void NavigateToSummary()
    {
        var url = $"/borrowing-contracts/{Contract?.Id}";
        NavigationManager.NavigateTo(url);
    }

    private string AltText()
    {
        return $"Picture of {Contract?.Item?.Name}";
    }

    protected override async Task OnInitializedAsync()
    {
        _showArrows = Contract.Item.Pictures.Count > 1;

        string userId = await CurrentUser.GetUserId();

        switch (Contract?.StatusChanges?.Last().To)
        {
            case ContractStatus.Pending:
                _cardContent = await ContractStringBuilder.RequestCardContent(Contract, userId);
                break;
            case ContractStatus.Accepted:
                _cardContent = await ContractStringBuilder.AcceptedCardContent(Contract, userId);
                break;
            case ContractStatus.Denied:
                _cardContent = await ContractStringBuilder.DeniedCardContent(Contract, userId);
                break;
            case ContractStatus.Cancelled:
                _cardContent = await ContractStringBuilder.CancelledCardContent(Contract, userId);
                break;
            case ContractStatus.Active:
                _cardContent = await ContractStringBuilder.ActiveCardContent(Contract, userId);
                break;
            case ContractStatus.Completed:
                _cardContent = await ContractStringBuilder.CompletedCardContent(Contract, userId);
                break;
            case ContractStatus.Late:
                _cardContent = await ContractStringBuilder.LateCardContent(Contract, userId);
                break;
            default:
                _cardContent = "No status change found.";
                break;
        }
    }
}
