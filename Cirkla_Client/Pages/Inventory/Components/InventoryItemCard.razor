@inject IClient Client;
@inject NavigationManager NavigationManager;

<div class="col-12 col-sm-6 col-md-3 mb-4">
    <MudCard Elevation="2">
        <MudCardMedia Height="200" Image="@Item.Pictures?.FirstOrDefault()?.Url" alt="@AltText()" Style="object-fit:cover; overflow:hidden"/>
        <MudCardContent>
            <MudText Typo="Typo.h5">@Item.Name</MudText>
            <MudText Typo="Typo.body2">@Item.Description</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton @onclick="NavigateToItemDetails" Variant="Variant.Text" Color="Color.Tertiary">More...</MudButton>
            <MudSpacer/>
            <MudMenuItem>
                    <MudSwitch T="bool"
                               Value="@_isAvailable"
                               ValueChanged="@((bool val) => ToggleAvailability(val))"
                               Label="Available"
                               ThumbIcon="@(_isAvailable ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
                               ThumbIconColor="@(_isAvailable ? Color.Success : Color.Error)"/>
            </MudMenuItem>
            <MudMenu Icon="@Icons.Material.Filled.Settings">
                <MudMenuItem Label="Edit">
                    <MudButton OnClick="() => NavigateToItemEdit()" Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit"/>
                </MudMenuItem>
                <MudMenuItem>
                    <DeleteItemButton Item="Item"/>
                </MudMenuItem>
            </MudMenu>
        </MudCardActions>
    </MudCard>
</div>

@code {

    // TODO: Add overlay over card when item is unavailable
    [Parameter]
    public Item? Item { get; set; }

    private bool _isOpen;
    private bool _isAvailable;


    protected override async Task OnInitializedAsync()
    {
        _isAvailable = (Item?.Status == ItemStatus.Available);
    }

    private async Task ToggleAvailability(bool newValue)
    {
        _isAvailable = newValue; // Ensure UI updates immediately
        Item.Status = newValue ? ItemStatus.Available : ItemStatus.Unavailable;
        try
        {
            await Client.ApiItemPutAsync(Item.Id, Item);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API update failed: {ex.Message}");
        }
    }

    private void NavigateToItemDetails()
    {
        var url = $"/itemdetails/?id={Item?.Id}";
        NavigationManager.NavigateTo(url);
    }

    private void NavigateToItemEdit()
    {
        var url = $"/item/edit/?id={Item?.Id}";
        NavigationManager.NavigateTo(url);
    }

    private string AltText()
    {
        return $"Picture of {Item?.Name}";
    }
}