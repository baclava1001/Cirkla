@inject IClient Client;
@inject NavigationManager NavigationManager;
@inject SnackbarService SnackbarService;

<MudCard Elevation="2">
    <MudCarousel ItemsSource="Item?.Pictures" Style="height: 200px" ShowBullets="false" ShowArrows="_showArrows" EnableSwipeGesture="true" AutoCycle="false">
        <ItemTemplate>
            <MudCardMedia Height="200" Image="@context.Url" alt="@AltText()" />
        </ItemTemplate>
    </MudCarousel>
    <MudCardContent>
        <MudText Typo="Typo.h5" Class="text-truncate">@Item?.Name</MudText>
        <MudText Typo="Typo.body2" Class="text-truncate">@Item?.Description</MudText>
    </MudCardContent>
    <MudCardActions Class="d-flex align-content-end flex-wrap flex-grow-1">
        <MudSpacer/>
        <MudButton @onclick="NavigateToItemDetails" Variant="Variant.Text" Color="Color.Tertiary">More...</MudButton>
    </MudCardActions>
    <MudDivider/>
    <MudCardActions>
        <MudSpacer/>
        <MudStack AlignItems="AlignItems.End" Class="gap-0">
            <MudItem>
                @* <MudTooltip Text="Set availability"> *@
                <MudSwitch T="bool"
                Value="@_isAvailable"
                ValueChanged="@((bool val) => ToggleAvailability(val))"
                ThumbIcon="@(_isAvailable ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
                ThumbIconColor="@(_isAvailable ? Color.Success : Color.Error)"
                Label="Availability"
                LabelPlacement="Placement.Left"/>
                @* </MudTooltip> *@
            </MudItem>
            <MudItem>
                <MudMenu @ref="_menuRef" Icon="@Icons.Material.Filled.Settings" Size="Size.Medium" Dense="true">
                    <MudMenuItem>
                        <BtnEditItem Item="Item"/>
                    </MudMenuItem>
                    <MudMenuItem>
                        <BtnDeleteItem Item="Item" OnItemDeleted="NotifyItemDeleted" />
                    </MudMenuItem>
                </MudMenu>
            </MudItem>
        </MudStack>
    </MudCardActions>
</MudCard>

@code {

    // TODO: Add overlay over card when item is unavailable
    [Parameter]
    public Item? Item { get; set; }
    [Parameter]
    public EventCallback<Item> OnItemDeleted { get; set; }

    private MudMenu _menuRef;
    private bool _isOpen;
    private bool _isAvailable;
    private bool _showArrows;


    protected override async Task OnInitializedAsync()
    {
        _isAvailable = (Item?.Status == ItemStatus.Available);
        _showArrows = Item.Pictures.Count > 1;
    }

    // TODO: Toggling doesn't work as expected
    private async Task ToggleAvailability(bool newValue)
    {
        // TODO: Implement availability change in backend (when contract.accepted, contract.late and contract.completed)
        // Can only be manually marked while there is no active contract, otherwise up tp the system
        if (await HasActiveLoans(Item))
        {
            SnackbarService.Warning("Unable to inactivate items with active contracts");
            return;
        }

        _isAvailable = newValue; // Ensure UI updates immediately
        Item.Status = newValue ? ItemStatus.Available : ItemStatus.Unavailable;
        try
        {
            await Client.UpdateItemAsync(Item.Id, Item);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API update failed: {ex.Message}");
        }
    }

    private void NavigateToItemDetails()
    {
        var url = $"/items/{Item?.Id}";
        NavigationManager.NavigateTo(url);
    }

    private async Task<bool> HasActiveLoans(Item item)
    {
        var activeLoans = await Client.GetAllBorrowingRequestsForItemAsync(item.Id);
        return activeLoans.Any();
    }

    private string AltText()
    {
        return $"Picture of {Item?.Name}";
    }

    private async Task NotifyItemDeleted()
    {
        if (OnItemDeleted.HasDelegate)
        {
            await OnItemDeleted.InvokeAsync(Item);
        }
    }
}