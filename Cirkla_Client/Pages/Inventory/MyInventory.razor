@page "/my-inventory"
@using Cirkla_Client.Pages.Inventory.Components
@inject IClient Client;

<PageTitle>My inventory</PageTitle>
<div class="row mb-3">
    <h3 class="col-2">My inventory</h3>
    <a href="/items/create" class="btn btn-primary col-sm-1"><i class="fa-solid fa-plus"/></a>
</div>
<hr/>

<div class="container">

    <MudDivider/>
    <div class="row my-5">
        <h4>Borrowed items</h4>
        @if (!BorrowingItems.Any())
        {
            <p>@borrowingItemsMessage</p>
        }
        else
        {
            foreach (var contract in BorrowingItems)
            {
                <ContractCard Contract="contract"/>
            }
        }
    </div>

    <MudDivider/>
    <div class="row my-5">
        <h4>Shared items</h4>
        @if (!SharingItems.Any())
        {
            <p>@sharingItemsMessage</p>
        }
        else
        {
            foreach (var contract in SharingItems)
            {
                <ContractCard Contract="contract"/>
            }
        }
    </div>

    <MudDivider/>
    <div class="row my-5">
        <h4>My items</h4>
        @if (!MyItems.Any())
        {
            <p>@myItemsMessage</p>
        }
        else
        {
            foreach (var item in MyItems)
            {
                <InventoryItemCard Item="item"/>
            }
        }
    </div>
</div>

@code {
    // TODO: Add pagination serverside & clientside

    [Parameter]
    public List<Item> MyItems { get; set; } = new();
    public List<Contract>? BorrowingItems { get; set; } = new();
    public List<Contract>? SharingItems { get; set; } = new();
    private string _tempUserId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; // TODO: Send in the actual logged in user's id. Here is use 'Liza Minelli', hardcoded.

    private string? borrowingItemsMessage = "Loading items...";
    private string? sharingItemsMessage = "Loading items...";
    private string? myItemsMessage = "Loading items...";

    protected override async Task OnParametersSetAsync()
    {
        BorrowingItems = await GetBorrowingItems();
        SharingItems = await GetSharingItems();
        MyItems = await GetMyItems();
    }

    private async Task<List<Contract>> GetBorrowingItems()
    {
        try
        {
            var borrowingResult = await Client.ApiTimeLineBorrowingTimeLineAsync(_tempUserId);
            return borrowingResult.ToList();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 404)
            {
                borrowingItemsMessage = "No items to load at this time";
            }
            return new List<Contract>();
        }
    }

    private async Task<List<Contract>> GetSharingItems()
    {
        try
        {
            var sharingResult = await Client.ApiTimeLineSharingTimeLineAsync(_tempUserId);
            return sharingResult.ToList();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 404)
            {
                sharingItemsMessage = "No items to load at this time";
            }
            return new List<Contract>();
        }
    }

    private async Task<List<Item>> GetMyItems()
    {
        try
        {
            var response = await Client.ApiItemByUserIdAsync(_tempUserId);
            return response.ToList();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 404)
            {
                myItemsMessage = "No items to load at this time";
            }
            return new List<Item>();
        }
    }
}
