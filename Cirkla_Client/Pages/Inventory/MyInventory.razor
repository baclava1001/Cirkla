@attribute [Authorize]
@page "/my-inventory"
@using Cirkla_Client.Pages.Inventory.Components
@inject IClient Client;
@inject CurrentUserService CurrentUser;


<PageTitle>My inventory</PageTitle>
<MudGrid Class="mb-3 d-flex flex-sm-wrap">
    <MudItem>
        <h3>My inventory</h3>
    </MudItem>
    <MudItem>
        <a href="/items/create" class="btn btn-primary flex-grow-1"><i class="fa-solid fa-plus"/> New item</a>
    </MudItem>
</MudGrid>
<hr/>


<MudTabs Elevation="1" Rounded="true" PanelClass="pa-6">
    <MudTabPanel Text="Borrowed items" BadgeColor="Color.Default" BadgeData="BorrowingItems?.Count">
        <h4>Borrowed items</h4>
        @if (!BorrowingItems.Any())
        {
            <p>@borrowingItemsMessage</p>
        }
        else
        {
            <MudGrid>
            @foreach (var contract in BorrowingItems)
            {

                    <MudItem xs="12" sm="6" md="3" lg="2" Class="mb-4">
                        <CardContract Contract="contract" />
                    </MudItem>
            }
            </MudGrid>
        }
    </MudTabPanel>

    <MudTabPanel Text="Shared items" BadgeColor="Color.Default" BadgeData="SharingItems?.Count">
        <h4>Shared items</h4>
        @if (!SharingItems.Any())
        {
            <p>@sharingItemsMessage</p>
        }
        else
        {
            <MudGrid>
            @foreach (var contract in SharingItems)
            {
                <MudItem xs="12" sm="6" md="3" lg="2" Class="mb-4">
                    <CardContract Contract="contract"/>
                </MudItem>
            }
            </MudGrid>
        }
    </MudTabPanel>

    <MudTabPanel Text="My items">
        <h4>My items</h4>
        @if (!MyItems.Any())
        {
            <p>@myItemsMessage</p>
        }
        else
        {
            <MudGrid>
            @foreach (var item in MyItems)
            {
                <MudItem xs="12" sm="6" md="3" lg="2" Class="mb-4">
                    <CardInventoryItem Item="item" OnItemDeleted="RefreshPage" />
                </MudItem>
            }
            </MudGrid>
        }
    </MudTabPanel>
</MudTabs>


@code {
    // TODO: Change tabs color to melt into the background

    [Parameter]
    public List<Item> MyItems { get; set; } = new();
    public List<Contract>? BorrowingItems { get; set; } = new();
    public List<Contract>? SharingItems { get; set; } = new();

    private string? borrowingItemsMessage = "Loading items...";
    private string? sharingItemsMessage = "Loading items...";
    private string? myItemsMessage = "Loading items...";

    protected override async Task OnParametersSetAsync()
    {
        BorrowingItems = await GetBorrowingItems();
        SharingItems = await GetSharingItems();
        MyItems = await GetMyItems();
    }

    private async Task<List<Contract>> GetBorrowingItems()
    {
        try
        {
            var borrowingResult = await Client.GetActiveLoansForBorrowerAsync(await CurrentUser.GetUserId());
            return borrowingResult.ToList();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 404)
            {
                borrowingItemsMessage = "Not borrowing any items at this time";
            }
            return new List<Contract>();
        }
    }

    private async Task<List<Contract>> GetSharingItems()
    {
        try
        {
            var sharingResult = await Client.GetActiveLoansForOwnerAsync(await CurrentUser.GetUserId());
            return sharingResult.ToList();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 404)
            {
                sharingItemsMessage = "Not sharing any items at this time";
            }
            return new List<Contract>();
        }
    }

    private async Task<List<Item>> GetMyItems()
    {
        try
        {
            var response = await Client.GetAllItemsForUserAsync(await CurrentUser.GetUserId());
            return response.ToList();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 404)
            {
                myItemsMessage = "No items to load at this time";
            }
            return new List<Item>();
        }
    }

    private async Task RefreshPage()
    {
        MyItems = await GetMyItems();
        await InvokeAsync(StateHasChanged);
    }
}