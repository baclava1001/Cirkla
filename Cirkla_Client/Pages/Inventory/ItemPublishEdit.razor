@attribute [Authorize]
@page "/items/create"
@page "/items/{itemId:int}/edit/"
@using System.Text.Json
@using Cirkla_Client.Pages.Inventory.Components;
@using Mapping.Mappers
@inject IClient Client;
@inject NavigationManager NavigationManager;
@inject SnackbarService SnackbarService;
@inject CurrentUserService CurrentUser;


<PageTitle>@TitleString</PageTitle>
<h3>@TitleString</h3>
<hr />
<EditForm method="post" Model="Item" OnValidSubmit="OnValidSubmit" FormName="PublishItem" disabled="@IsSendingApiRequest">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row mb-3">
            <label for="name" class="col-sm-2 col-form-label">Name </label>
            <div class="col-sm-10">
                <InputText id="name" @bind-Value="Item.Name" class="form-control" />
                <ValidationMessage For="() => Item.Name" class="text-danger" />
            </div>
        </div>
        <CascadingValue Value="temporaryCategoryList">
            <CascadingValue Value="Item">
                <CategoryDropdown />
            </CascadingValue>
        </CascadingValue>
        <div class="row mb-3">
            <label for="model" class="col-sm-2 col-form-label">Model </label>
            <div class="col-sm-10">
                <InputText id="model" @bind-Value="Item.Model" class="form-control" placeholder="Maker, model and year, if applicable" />
                <ValidationMessage For="() => Item.Model" class="text-danger" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="specifications" class="col-sm-2 col-form-label">Specifications </label>
            <div class="col-sm-10">
                <InputTextArea id="specifications" @bind-Value="Item.Specifications" class="form-control fs-6" rows="4" placeholder="Good to know technical details and characteristics" />
                <ValidationMessage For="() => Item.Specifications" class="=text-danger" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="description" class="col-sm-2 col-form-label">Description </label>
            <div class="col-sm-10">
                <InputTextArea id="description" @bind-Value="Item.Description" class="form-control fs-6" rows="4" placeholder="General description" />
                <ValidationMessage For="() => Item.Description" class="text-danger" />
            </div>
        </div>
        <FormAddItemPicture ItemPicture="ItemPicture" OnPictureAdded="AddPictureToList" />
        <MudGrid Class="d-flex flex-column flex-sm-row align-items-end">
            <MudItem xs="12" sm="8">
                <ImageGrid Item="Item" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudGrid Spacing="3" Class="d-flex flex-column align-items-end">
                    <MudItem>
                        <a href="/my-inventory"><input class="btn btn-secondary" type="button" value="Cancel" style="min-width: 150px;"/></a>
                    </MudItem>
                    @if (IsEditing)
                    {
                        <MudItem>
                            <BtnDeleteItem Item="Item"/>
                        </MudItem>
                        <MudItem>
                            <BtnSaveEditedItem ItemId="ItemId" Item="Item" IsSendingApiRequest="IsSendingApiRequest"/>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem>
                            <input class="btn btn-warning" type="reset" value="Reset" style="min-width: 150px;"/>
                        </MudItem>
                        <MudItem>
                            <BtnPublishItem IsSendingApiRequest="IsSendingApiRequest" OnClick="OnValidSubmit"/>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
    </div>
</EditForm>


@code {
    // TODO: Clean up element alignment
    [Parameter]
    public int? ItemId { get; set; }

    [SupplyParameterFromForm]
    public Item? Item { get; set; } = new();

    [CascadingParameter]
    public ItemPicture? ItemPicture { get; set; } = new();

    // TODO: Later make Category a separate, prepopulated table in db
    // TODO: Remove temporary list when Category is a separate table
    private string[] temporaryCategoryList = ["Transportation", "Household & tools", "Accommodation", "Personal stuff", "Electronics", "Leisure & hobby"]; 

    public bool IsSendingApiRequest { get; set; }
    private bool IsEditing => !string.IsNullOrWhiteSpace(ItemId.ToString());

    private string TitleString { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        if (IsEditing && ItemId.HasValue)
        {
            Item = await Client.ApiItemGetAsync(ItemId.Value);
            TitleString = $"Edit {Item.Name}";
        }
        else
        {
            TitleString = "Publish new item";
        }
    }


    private void AddPictureToList()
    {
        if (Item?.Pictures is null)
        {
            Item.Pictures = new List<ItemPicture>();
        }

        if(ItemPicture is not null)
        {
            ItemPicture itemPicture = new();
            itemPicture.Url = ItemPicture.Url;
            try
            {
                Item.Pictures.Add(itemPicture);
                SnackbarService.Success("Picture added successfully");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                SnackbarService.Error("Failed to add picture");
            }
        }
    }


    private async Task OnValidSubmit()
    {
        IsSendingApiRequest = true;

        try
        {
            Item.OwnerId = await CurrentUser.GetUserId();
            var itemCreateDTO = await Mapper.MapToItemCreateDTO(Item);
            await Client.ApiItemPostAsync(itemCreateDTO);
            SnackbarService.Success($"{Item.Name} published successfully");

        }
        catch (ApiException ex)
        {
            SnackbarService.Error("Server error, unable to save item");
        }
        catch (Exception ex)
        {
            SnackbarService.Error("Unexpected error, unable to save item");
        }
        finally
        {
            Item = new(); // Fresh object reference to empty the form
            IsSendingApiRequest = false;
        }
    }
}