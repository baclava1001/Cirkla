@page "/items/create"
@page "/items/{itemId:int}/edit/"
@using System.Text.Json
@using Cirkla_Client.Pages.Inventory.Components;
@using Mapping.Mappers
@using SnackbarService = Cirkla_Client.Services.SnackbarService
@inject IClient Client;
@inject NavigationManager NavigationManager;
@inject SnackbarService SnackbarService;


<PageTitle>@TitleString</PageTitle>
<h3>@TitleString</h3>
<hr />
<EditForm method="post" Model="Item" OnValidSubmit="OnValidSubmit" FormName="PublishItem">
    <DataAnnotationsValidator />
    <fieldset disabled="@IsSendingApiRequest">
        <div class="container">
            <div class="row mb-3">
                <label for="name" class="col-sm-2 col-form-label">Name </label>
                <div class="col-sm-10">
                    <InputText id="name" @bind-Value="Item.Name" class="form-control" />
                    <ValidationMessage For="() => Item.Name" class="text-danger" />
                </div>
            </div>
            <CascadingValue Value="temporaryCategoryList">
                <CascadingValue Value="Item">
                    <CategoryDropdown />
                </CascadingValue>
            </CascadingValue>
            <div class="row mb-3">
                <label for="model" class="col-sm-2 col-form-label">Model </label>
                <div class="col-sm-10">
                    <InputText id="model" @bind-Value="Item.Model" class="form-control" placeholder="Maker, model and year, if applicable" />
                    <ValidationMessage For="() => Item.Model" class="text-danger" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="specifications" class="col-sm-2 col-form-label">Specifications </label>
                <div class="col-sm-10">
                    <InputTextArea id="specifications" @bind-Value="Item.Specifications" class="form-control fs-6" rows="4" placeholder="Good to know technical details and characteristics" />
                    <ValidationMessage For="() => Item.Specifications" class="=text-danger" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="description" class="col-sm-2 col-form-label">Description </label>
                <div class="col-sm-10">
                    <InputTextArea id="description" @bind-Value="Item.Description" class="form-control fs-6" rows="4" placeholder="General description" />
                    <ValidationMessage For="() => Item.Description" class="text-danger" />
                </div>
            </div>
            <CascadingValue Value="ItemPicture">
                <AddItemPicture OnPictureAdded="AddPictureToList" />
            </CascadingValue>
            <div class="row align-content-end">
                <div id="buttons" class="col-sm-10 ms-auto">
                    <input class="btn btn-secondary" type="button" value="Back" />
                    <DeleteItemButton Item="Item"/>
                    @if (IsEditing)
                    {
                        <button class="btn btn-primary" type="button" @onclick="OnValidEdit">Edit</button>
                    }
                    else
                    {
                        <input class="btn btn-secondary" type="reset" value="Reset"/>
                        <button class="btn btn-primary" type="button" @onclick="OnValidSubmit">Publish</button>
                    }
                </div>
            </div>
        </div>
    </fieldset>
</EditForm>
<div class="mb-3">
    @if (Item?.Pictures is not null)
    {
        foreach (ItemPicture picture in Item.Pictures)
        {
            <img src="@picture.Url" class="img-fluid rounded" alt="Picture of @Item.Name" />
        }
    }
</div>


@code {
    // TODO: Make each button it's own component
    // TODO: Later make Category a separate, prepopulated table in db
    [Parameter]
    public int? ItemId { get; set; }

    [SupplyParameterFromForm]
    public Item? Item { get; set; } = new();

    [CascadingParameter]
    public ItemPicture? ItemPicture { get; set; } = new();



    // TODO: Remove temporary list when Category is a separate table
    private string[] temporaryCategoryList = ["Transportation", "Household & tools", "Accommodation", "Personal stuff", "Electronics", "Leisure & hobby"]; 

    public bool IsSendingApiRequest { get; set; }
    private bool IsEditing => !string.IsNullOrWhiteSpace(ItemId.ToString());

    private string TitleString { get; set; } = "";
    private string? _errorMessage;
    private string? _successMessage;


    protected override async Task OnInitializedAsync()
    {
        if (IsEditing && ItemId.HasValue)
        {
            Item = await Client.ApiItemGetAsync(ItemId.Value);
            TitleString = $"Edit {Item.Name}";
        }
        else
        {
            TitleString = "Publish new item";
        }
    }


    // TODO: Extract to AddItemPicture component and add picture component with delete button
    private void AddPictureToList()
    {
        if (Item?.Pictures is null)
        {
            Item.Pictures = new List<ItemPicture>();
        }

        if(ItemPicture is not null)
        {
            ItemPicture itemPicture = new();
            itemPicture.Url = ItemPicture.Url;
            try
            {
                Item.Pictures.Add(itemPicture);
                SnackbarService.Success("Picture added successfully");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                SnackbarService.Error("Failed to add picture");
            }

        }
    }


    private async Task OnValidSubmit()
    {
        IsSendingApiRequest = true;

        try
        {
            Item.OwnerId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; //Liza Minelli's id, hardcoded
            var itemCreateDTO = await Mapper.MapToItemCreateDTO(Item);
            await Client.ApiItemPostAsync(itemCreateDTO);
            await Task.Delay(500);
            _errorMessage = null;
            _successMessage = $"{Item.Name} published successfully";
        }
        catch (ApiException ex)
        {
            _errorMessage = ex.Message;
        }
        catch(Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            Item = new(); // Fresh object reference to empty the form
            IsSendingApiRequest = false;
        }
    }


    private async Task OnValidEdit()
    {
        IsSendingApiRequest = true;

        try
        {
            Item.OwnerId = "b2162ceb-793d-4e32-8029-ca56472dd93a"; // TODO: Remove this - Liza Minelli's id, hardcoded
            await Client.ApiItemPutAsync(ItemId.Value, Item);
            //await Task.Delay(500);
            IsSendingApiRequest = false;
            SnackbarService.Success($"{Item.Name} was successfully edited");
            var url = $"/items/{ItemId.Value}";
            NavigationManager.NavigateTo(url, forceLoad: true);
        }
        catch (ApiException ex)
        {
            _errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        // finally
        // {
        //     IsSendingApiRequest = false;
        //     var url = $"/items/{ItemId.Value}";
        //     NavigationManager.NavigateTo(url, forceLoad:true);
        // }
    }
}