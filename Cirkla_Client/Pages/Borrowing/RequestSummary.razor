@page "/borrowing-contracts/{contractId:int}"
@using System.Runtime.CompilerServices;
@using Cirkla_Client.Pages.Borrowing.Components;
@using Cirkla_Client.Pages.Components
@inject IClient Client;
@inject NavigationManager NavigationManager;
@inject SnackbarService SnackbarService;


<PageTitle>Request summary</PageTitle>
<h3>Request @_requestNumber summary</h3>
<hr />

<div>
    @if (Contract is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <CarouselItemImages ItemPictures="Contract?.ItemPictures?.ToList()" AltText="@AltText()" />
        <br />
        <dl class="row">
            <dt class="col-sm-2">Cirkla member</dt>
            <dd class="col-sm-10">@Contract?.BorrowerFullName</dd>
            <dt class="col-sm-2">Requests to borrow</dt>
            <dd class="col-sm-10">@Contract?.ItemName @Contract?.ItemModel</dd>
            <dt class="col-sm-2">From Cirkla member</dt>
            <dd class="col-sm-10">@Contract?.OwnerFullName</dd>
            @if (Contract.StatusChanges.Any(sc => sc.To == ContractStatus.Accepted))
            {
                <dt class="col-sm-2">Contact owner for details</dt>
                <dd class="col-sm-10">@Contract?.OwnerPhoneNumber</dd>
            }
            <dt class="col-sm-2">From</dt>
            <dd class="col-sm-10">@Contract?.StartTime</dd>
            <dt class="col-sm-2">To</dt>
            <dd class="col-sm-10">@Contract?.EndTime</dd>
            @* <dt class="col-sm-2">Under the following conditions</dt>
            <dd class="col-sm-10">(Coming feature, not yet implemented)</dd> *@
            <dt class="col-sm-2">Current status</dt>
            <dd class="col-sm-10">@Contract.StatusChanges.LastOrDefault().To by @Contract?.StatusChanges?.LastOrDefault()?.ChangedBy?.FirstName</dd>
            <dt class="col-sm-2">Status history</dt>
            <dd class="col-sm-10">
                <ul>
                    @foreach (var statusChange in Contract?.StatusChanges?.Reverse())
                    {
                        <li>@statusChange?.ChangedBy?.FirstName</li>
                        <li>@statusChange?.ChangedAt</li>
                        <li>@statusChange?.From -> @statusChange?.To</li>
                        <br/>
                    }
                </ul>
            </dd>
        </dl>
        <MudGrid Class="d-flex flex-column flex-lg-row">
            <MudItem>
            <MudButton Href="/my-inventory"
                       id="Back"
                       ButtonType="ButtonType.Button"
                       Color="Color.Dark"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.FastRewind"
                       Class="flex-grow-1">Back</MudButton>
            </MudItem>
            @if (_canCancel)
            {
                <MudItem>
                    <CancelRequestButton Contract="Contract"/>
                </MudItem>
            }
            <AccessGuard CompareToId="@Contract?.OwnerId">
            @if (_canReply)
            {
                <MudItem>
                    <ReplyToRequestButtons Contract="Contract"/>
                </MudItem>
            }
            </AccessGuard>
            @if (_canActivate)
            {
                <MudItem>
                    <ActivateRequestButton Contract="Contract"/>
                </MudItem>
            }
            @if (_canComplete)
            {
                <MudItem>
                    <CompleteRequestButton Contract="Contract"/>
                </MudItem>
            }
        </MudGrid>
    }
</div>


@code {
    // TODO: Add more detailed conditions for showing/hiding buttons and refactor to pattern matching (depending on date, logged in user, etc)

    [Parameter]
    public int ContractId { get; set; }

    private ContractResponseDTO? Contract { get; set; }

    private string? _requestNumber;
    private bool _canReply;
    private bool _canActivate;
    private bool _canCancel;
    private bool _canComplete;

    protected override async Task OnInitializedAsync()
    {
        await GetRequestDataFromApi();

        var changes = Contract?.StatusChanges;
        var lastStatus = changes?.LastOrDefault()?.To;
    
        _canReply = changes is not null &&
                    !changes.Any(sc => sc.To is ContractStatus.Accepted or ContractStatus.Denied or ContractStatus.Cancelled);
        _canActivate = changes is not null &&
                       lastStatus is ContractStatus.Accepted &&
                       !changes.Any(sc => sc.To is ContractStatus.Completed or ContractStatus.Archived);
        _canCancel = changes is not null &&
                         !changes.Any(sc => sc.To is ContractStatus.Archived) &&
                         lastStatus is not ContractStatus.Cancelled and not ContractStatus.Denied;
        _canComplete = changes is not null &&
                       lastStatus is ContractStatus.Active &&
                       !changes.Any(sc => sc.To is ContractStatus.Completed or ContractStatus.Archived);
    }



    private async Task GetRequestDataFromApi()
    {
        Console.WriteLine("RequestSummary component is getting Contract values from API...");
        try
        {
            Contract = await Client.ApiBorrowingContractViewRequestSummaryAsync(ContractId);
            _requestNumber = $"#{Contract.Id}";
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 404)
            {
                SnackbarService.Error("Something went wrong getting Contract values from API."); 
                Console.WriteLine(ex.Message);
            }
            else
            {
                SnackbarService.Error("Something went wrong getting Contract values from API.");
                Console.WriteLine(ex.Message);
            }
        }
        catch (Exception ex)
        {
            SnackbarService.Error("Something went wrong getting Contract values from API.");
            Console.WriteLine(ex.Message);
        }
    }

    private string AltText()
    {
        return $"Image of {Contract?.ItemName}";
    }
}

