@using Mapping.Mappers
@inject IClient Client;
@inject NavigationManager NavigationManager;

@if (Contract is not null)
{
        <MudButton id="Deny" ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" OnClick='() => SendReplyToBorrower("Deny")' Class="ml-2">Deny</MudButton>
        
        <MudButton id="Accept" ButtonType="ButtonType.Button" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" OnClick='() => SendReplyToBorrower("Accept")' Class="ml-2">Accept</MudButton>
}


@code {
    [Parameter]
    public Contract? Contract { get; set; }

    private async Task SendReplyToBorrower(string buttonName)
    {
        //var contractUpdateDTO = Mapper.MapToContractUpdateDTO(Contract); // TODO: Fix this

        ContractUpdateDTO contractUpdateDTO = new()
            {
                Id = Contract.Id,
                UpdatedByUserId = Contract.OwnerId,
                ItemId = Contract.ItemId,
                OwnerId = Contract.OwnerId,
                BorrowerId = Contract.BorrowerId,
                StartTime = Contract.StartTime,
                EndTime = Contract.EndTime,
                Created = Contract.Created,
                FromStatus = ContractStatus.None,
                ToStatus = Contract.StatusChanges.LastOrDefault().To
            };

        try
        {
            if (buttonName == "Deny")
            {
                contractUpdateDTO.ToStatus = ContractStatus.Denied;
            }
            else if (buttonName == "Accept")
            {
                contractUpdateDTO.ToStatus = ContractStatus.Accepted;
            }
            await Client.ApiBorrowingContractRespondToRequestAsync(Contract.Id, contractUpdateDTO);
            Console.WriteLine("Button component responded to borrower request successfully");
            NavigationManager.NavigateTo("/inventory");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
