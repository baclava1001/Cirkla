@inject IClient Client;
@inject NavigationManager NavigationManager;

@if (Contract is not null)
{
        <MudButton id="Activate" Buttontype="ButtonType.Button" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="() => ActivateRequest()" Class="ml-2">Activate</MudButton>
}

@code {
    [Parameter]
    public ContractResponseDTO? Contract { get; set; }

    private async Task ActivateRequest()
    {
        ContractUpdateDTO contractUpdateDTO = new()
        {
            Id = Contract.Id.Value,
            ItemId = Contract.ItemId.Value,
            OwnerId = Contract.OwnerId,
            BorrowerId = Contract.BorrowerId,
            Created = Contract.Created.Value,
            StartTime = Contract.StartTime.Value,
            EndTime = Contract.EndTime.Value,
            UpdatedByUserId = Contract.OwnerId,
            UpdatedAt = DateTime.Now,
            FromStatus = Contract.StatusChanges.LastOrDefault().To,
            ToStatus = ContractStatus.Active
        };

        try
        {
            await Client.ApiBorrowingContractActivateRequestAsync(Contract.Id.Value, contractUpdateDTO);
            Console.WriteLine("Button component activated request successfully");
            NavigationManager.NavigateTo("/my-inventory");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}

