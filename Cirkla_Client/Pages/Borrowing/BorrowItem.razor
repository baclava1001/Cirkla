@page "/items/{itemId:int}/borrowing-contract/create"
@using Cirkla_Client.Pages.Components
@inject IClient Client;
@inject NavigationManager NavigationManager;
@inject CurrentUserService CurrentUser;
@inject SnackbarService SnackbarService;

<PageTitle>Request to borrow @Item?.Name</PageTitle>
<h3>Request to borrow @Item?.Name</h3>
<hr />

@if(Item is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* Image Carousel *@
    <CarouselItemImages ItemPictures="Item?.Pictures?.ToList()" AltText="@AltText()"/>
    <br/>
    <dl class="row">
        <dt class="col-sm-2">Category</dt>
        <dd class="col-sm-10">@Item.Category</dd>
        <dt class="col-sm-2">Model</dt>
        <dd class="col-sm-10">@Item.Model</dd>
        <dt class="col-sm-2">Specifications</dt>
        <dd class="col-sm-10">@Item.Specifications</dd>
        <dt class="col-sm-2">Description</dt>
        <dd class="col-sm-10">@Item.Description</dd>
        <dt class="col-sm-2">Owner</dt>
        <dd class="col-sm-10">@Item.Owner?.FirstName @Item.Owner?.LastName</dd>
        <dt class="col-sm-2">Zip code</dt>
        <dd class="col-sm-10">@Item.Owner?.ZipCode</dd>
    </dl>

    @* DateRangePicker from MudBlazor *@
    <MudStack Style="max-width: 500px">
        <MudDateRangePicker @ref="_picker"
                            Label="Pick dates"
                            MinDate="DateTime.Now"
                            IsDateDisabledFunc="IsDisabledDate"
                            @bind-DateRange="DateRange" 
                            AutoClose="true"
                            PickerVariant="PickerVariant.Dialog"
                            Color="Color.Tertiary"
                            Class="w-auto">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Clear</MudButton>
                <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Ok</MudButton>
            </PickerActions>
        </MudDateRangePicker>

        @* Buttons *@
        <MudGrid Class="d-flex flex-column flex-lg-row">
            <MudSpacer/>
            <MudItem>
                <a href="/my-inventory" class="btn btn-secondary me-2 px-3" type="button">Back</a>
            </MudItem>
            <MudItem>
                <button class="btn btn-primary me-2 px-5" type="button" @onclick="(() => AskToBorrow())">Cirkla!</button>
            </MudItem>
        </MudGrid>
    </MudStack>
}



@code {
    // TODO: Refactor and extract datepickers?
    [Parameter]
    public int ItemId { get; set; } //Item id from http-route parameter
    public Item? Item { get; set; } = new();
    public ContractCreateDTO ContractDTO { get; set; } = new();

    private MudDateRangePicker? _picker;
    private DateRange? DateRange { get; set; } = new();
    private ICollection<ContractResponseDTO> _activeContractsForItem;
    private List<(DateTime? Start, DateTime? End)> _unavailableDateRanges = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await Client.ApiItemGetAsync(ItemId);
        }
        catch(Exception ex)
        {
            SnackbarService.Error("Unable to load item");
            NavigationManager.NavigateTo("/cirkla");
        }

        try
        {
            _activeContractsForItem = await Client.ApiBorrowingContractRequestAllAsync(ItemId);
            foreach (var contract in _activeContractsForItem)
            {
                _unavailableDateRanges.Add(new(contract.StartTime, contract.EndTime));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while disabling busy dates: {ex.Message}");
        }
    }


    private async Task AskToBorrow()
    {
        ContractDTO.ItemId = Item.Id;
        ContractDTO.BorrowerId = await CurrentUser.GetUserId();
        ContractDTO.OwnerId = Item.OwnerId;
        ContractDTO.Created = DateTime.Now;
        ContractDTO.StartTime = DateRange.Start.Value;
        ContractDTO.EndTime = DateRange.End.Value;
        ContractDTO.CurrentStatus = ContractStatus.Pending;

        try
        {
            var response = await Client.ApiBorrowingContractRequestSendAsync(ContractDTO);
            SnackbarService.Success($"You've requested to borrow {Item.Name}");
            NavigationManager.NavigateTo($"/borrowing-contracts/{response}");
        }
        catch (ApiException ex)
        {
            SnackbarService.Error($"Couldn't send loan request for {Item.Name}");
        }
    }


    private bool IsDisabledDate(DateTime date)
    {
        return _unavailableDateRanges.Any(r => date >= r.Start && date <= r.End);
    }


    private string AltText()
    {
        return $"Image of {Item?.Name}";
    }
}

