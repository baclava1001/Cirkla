@page "/items/{itemId:int}/borrowing-contract/create"
@using Cirkla_Client.Pages.Components
@inject IClient Client;
@inject NavigationManager NavigationManager;
@inject CurrentUserService CurrentUser;
@inject SnackbarService SnackbarService;

<PageTitle>Request to borrow @Item?.Name</PageTitle>
<h3>Request to borrow @Item?.Name</h3>
<hr />

<div>
    @if(Item is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <CarouselItemImages ItemPictures="Item?.Pictures?.ToList()" AltText="@AltText()"/>
        <br/>
        <dl class="row">
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@Item.Category</dd>
            <dt class="col-sm-2">Model</dt>
            <dd class="col-sm-10">@Item.Model</dd>
            <dt class="col-sm-2">Specifications</dt>
            <dd class="col-sm-10">@Item.Specifications</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Item.Description</dd>
            <dt class="col-sm-2">Owner</dt>
            <dd class="col-sm-10">@Item.Owner?.FirstName @Item.Owner?.LastName</dd>
            <dt class="col-sm-2">Zip code</dt>
            <dd class="col-sm-10">@Item.Owner?.ZipCode</dd>
        </dl>

    }

    <MudStack Class="w-auto">
        <MudDateRangePicker @ref="_picker"
        Label="Pick dates"
        MinDate="DateTime.Now"
        @bind-DateRange="DateRange" 
        AutoClose="true"
        PickerVariant="PickerVariant.Dialog"
        Color="Color.Tertiary"
        Class="my-5 w-auto">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Clear</MudButton>
                <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Ok</MudButton>
            </PickerActions>
        </MudDateRangePicker>
    </MudStack>

@*                 <div class="row mb-3">
                <div class="col-4">
                    <label for="requested-pickup-date" class="form-label">Requested pickup date & time</label>
                    <div class="col-sm-10">
                    <input type="datetime-local" id="start-time" class="form-control" min="@minDateTime" @bind="ContractDTO.StartTime" @oninput="e => ValidateDateTime(e, dateTime => ContractDTO.StartTime = dateTime)" required />
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-4">
                <label for="requested-return-date" class="form-label">Requested return date & time</label>
                <div class="col-sm-10">
                <input type="datetime-local" id="end-time" class="form-control" min="@minDateTime" @bind="ContractDTO.EndTime" @oninput="e => ValidateDateTime(e, dateTime => ContractDTO.EndTime = dateTime)" required />
                </div>
            </div>
            </div> *@
            <div class="row">
                <div class="col-4">
                    <a href="/my-inventory" class="btn btn-secondary me-2 px-3" type="button">Back</a>
                    <button class="btn btn-primary me-2 px-5" type="button" @onclick="(() => AskToBorrow())">Cirkla!</button>
                </div>
            </div>
</div>


@code {
    // TODO: Refactor and extract datepickers?
    [Parameter]
    public int ItemId { get; set; } //Item id from http-route parameter
    public Item? Item { get; set; } = new();
    public ContractCreateDTO ContractDTO { get; set; } = new();

    private MudDateRangePicker? _picker;
    private DateRange? DateRange { get; set; }
    // string minDateTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await Client.ApiItemGetAsync(ItemId);
            // ContractDTO.StartTime = DateTime.Parse(minDateTime);
            // ContractDTO.EndTime = DateTime.Parse(minDateTime);
        }
        catch(Exception ex)
        {
            SnackbarService.Error("Unable to load item");
            NavigationManager.NavigateTo("/cirkla");
        }
    }


    //TODO: Try binding to DateRange instead of using a separate variable
    private async Task AskToBorrow()
    {
        ContractDTO.ItemId = Item.Id;
        ContractDTO.BorrowerId = await CurrentUser.GetUserId();
        ContractDTO.OwnerId = Item.OwnerId;
        ContractDTO.Created = DateTime.Now;
        ContractDTO.StartTime = DateRange.Start.Value;
        ContractDTO.EndTime = DateRange.End.Value;
        ContractDTO.CurrentStatus = ContractStatus.Pending;

        try
        {
            var response = await Client.ApiBorrowingContractSendRequestAsync(ContractDTO);
            SnackbarService.Success($"You've requested to borrow {Item.Name}");
            NavigationManager.NavigateTo($"/borrowing-contracts/{response}");
        }
        catch (ApiException ex)
        {
            SnackbarService.Error($"Couldn't send loan request for {Item.Name}");
        }
    }

    // Checks if input date is before DateTime.Now and resets to Datetime.Now
    // private async Task ValidateDateTime(ChangeEventArgs e, Action<DateTime> updateAction)
    // {
    //     if(string.IsNullOrWhiteSpace(e.Value.ToString()) || DateTime.Compare(DateTime.Parse(e.Value.ToString()), DateTime.Now) < 0)
    //     {
    //         updateAction(DateTime.Now);
    //     }
    // }

    private string AltText()
    {
        return $"Image of {Item?.Name}";
    }
}

