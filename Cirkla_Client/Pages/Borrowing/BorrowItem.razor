@page "/borrowitem/"
@inject IClient _client;
@inject NavigationManager _navigationManager;

<PageTitle>Details for @Item?.Name</PageTitle>
<h3>Details for @Item?.Name</h3>
<hr />

<div>
    @if(Item is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <img src="@Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @Item.Name" class="img-fluid" style="max-width: 350px; height: auto;" />
        <br />
        <br />
        <dl class="row">
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@Item.Category</dd>
            <dt class="col-sm-2">Model</dt>
            <dd class="col-sm-10">@Item.Model</dd>
            <dt class="col-sm-2">Specifications</dt>
            <dd class="col-sm-10">@Item.Specifications</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Item.Description</dd>
            <dt class="col-sm-2">Owner</dt>
            <dd class="col-sm-10">@Item.Owner?.FirstName @Item.Owner?.LastName</dd>
            <dt class="col-sm-2">Zip code</dt>
            <dd class="col-sm-10">@Item.Owner?.ZipCode</dd>
        </dl>
            <div class="row mb-3">
                <div class="col-4">
                    <label for="requestedpickupdate" class="form-label">Requested pickup date & time</label>
                    <div class="col-sm-10">
                    <input type="datetime-local" id="start-time" class="form-control" min="@minDateTime" @bind="ContractDTO.StartTime" @oninput="e => ValidateDateTime(e, dateTime => ContractDTO.StartTime = dateTime)" required />
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-4">
                <label for="requestedreturndate" class="form-label">Requested return date & time</label>
                <div class="col-sm-10">
                <input type="datetime-local" id="end-time" class="form-control" min="@minDateTime" @bind="ContractDTO.EndTime" @oninput="e => ValidateDateTime(e, dateTime => ContractDTO.EndTime = dateTime)" required />
                </div>
            </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <a href="/inventory" class="btn btn-secondary me-2 px-3" type="button">Back</a>
                    <button class="btn btn-primary me-2 px-5" type="button" @onclick="(() => AskToBorrow())">Cirkla!</button>
                </div>
            </div>
    }
    @if(!string.IsNullOrEmpty(tempMessage))
    {
        <p class="@messageClass mt-3">@tempMessage</p>
    }
</div>


@code {
    // TODO: Refactor and extract datepickers?
    // TODO: Add more pictures in this view
    [SupplyParameterFromQuery]
    public int Id { get; set; } //Item id from http-query

    public Item? Item { get; set; } = new();

    public ContractCreateDTO ContractDTO { get; set; } = new();

    string minDateTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
    string? tempMessage;
    string? messageClass;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Item = await _client.ApiItemGetAsync(Id);
            ContractDTO.StartTime = DateTime.Parse(minDateTime);
            ContractDTO.EndTime = DateTime.Parse(minDateTime);
        }
        catch(Exception ex)
        {
            messageClass = "text-danger";
            tempMessage = ex.Message.ToString();
        }
    }

    private async Task AskToBorrow()
    {
        ContractDTO.ItemId = Item.Id;
        ContractDTO.BorrowerId = "54b5627b-1f8e-4634-8bb0-206fecc840f3"; // Samed, hardcoded. TODO: get Id from JWT or session
        ContractDTO.OwnerId = Item.OwnerId;
        ContractDTO.Created = DateTime.Now;
        ContractDTO.CurrentStatus = ContractStatus.Pending;
        // TODO: Add custom validation message if StartDate is later than EndDate

        try
        {
            var response = await _client.ApiBorrowingContractSendRequestAsync(ContractDTO);
            _navigationManager.NavigateTo($"/request/view?id={response.Id}");
        }
        catch (ApiException ex)
        {
            if(ex.StatusCode is >= 200 and <= 299)
            {
                messageClass = "text-success";
                tempMessage = $"Your request to borrow {Item.Name} has been successfully sent to {Item.Owner.FirstName} {Item.Owner.LastName}";
            }
            else if(ex.StatusCode >= 400 && ex.StatusCode <= 499)
            {
                messageClass = "text-danger";
                tempMessage = ex.Message.ToString();
            }
            else
            {
                messageClass = "text-danger";
                tempMessage = ex.Message.ToString();
            }
        }
    }

    // Checks if input date is before DateTime.Now and resets to Datetime.Now
    private async Task ValidateDateTime(ChangeEventArgs e, Action<DateTime> updateAction)
    {
        if(string.IsNullOrWhiteSpace(e.Value.ToString()) || DateTime.Compare(DateTime.Parse(e.Value.ToString()), DateTime.Now) < 0)
        {
            updateAction(DateTime.Now);
        }
    }
}

