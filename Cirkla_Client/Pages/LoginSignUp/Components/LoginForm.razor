@using Cirkla_Client.Extensions
@using Cirkla_Client.Providers
@using Cirkla_Client.Services;
@using SnackbarService = Cirkla_Client.Services.SnackbarService
@inject IClient Client;
@inject IAuthenticationService AuthService;
@inject NavigationManager NavigationManager;
@inject IApiAuthStateProvider AuthStateProvider;
@inject SnackbarService SnackbarService

<EditForm method="post" Model="User" OnSubmit="OnValidSubmit" disabled="@_isSendingApiRequest">
    <DataAnnotationsValidator />
    <h3 class="mb-3">Login</h3>
    <div class="mb-4">
        <InputText placeholder="E-mail" id="username" autocomplete="off" @bind-Value="User.Email" class="form-control" />
        <ValidationMessage For="() => User.Email" class="text-danger" />
    </div>
    <div class="mb-4">
        <InputText placeholder="Password" id="password" type="password" autocomplete="new-password" @bind-Value="User.Password" class="form-control" />
        <ValidationMessage For="() => User.Password" class="text-danger" />
    </div>
    <div class="d-flex my-5">
        <input class="btn btn-secondary flex-grow-1 me-2" type="reset" value="Reset"/>
        <button class="btn btn-primary flex-grow-1" type="submit" value="Submit">Login</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public UserLoginDTO User { get; set; } = new();

    private bool _isSendingApiRequest;

    private async Task OnValidSubmit()
    {
        _isSendingApiRequest = true;
        try
        {
            await AuthService.Authenticate(User);
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            SnackbarService.Success($"Welcome, {user.GetFullName()}!");
            NavigationManager.NavigateTo("/cirkla");
        }
        catch(Exception ex)
        {
            SnackbarService.Error("Something went wrong, can't log in");
        }
        finally
        {
            _isSendingApiRequest = false;
        }
    }
}