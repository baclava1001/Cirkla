@using Cirkla_Client.Services;
@inject IClient _client;
@inject IAuthenticationService _authService;
@inject NavigationManager _navigationManager;

<EditForm method="post" Model="User" OnSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <h3>Login</h3>
    <hr />
    <div class="=mb3">
        <label for="username" class="form-label">Email </label>
        <InputText id="username" @bind-Value="User.Email" class="form-control" />
        <ValidationMessage For="() => User.Email" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password </label>
        <InputText id="password" type="password" @bind-Value="User.Password" class="form-control" />
        <ValidationMessage For="() => User.Password" class="text-danger" />
    </div>
    <div>
        <input class="btn btn-secondary" type="reset" value="Reset" />
        <button class="btn btn-primary" type="submit" value="Submit">Login</button>
    </div>
    <div class="mt-3 mb-3">
        @if (errorMessage is not null)
        {
            <p class="text-danger">@errorMessage</p>
        }
        else
        {
            <p class="text-success">@successMessage</p>
        }
    </div>
</EditForm>


@code {

    [Parameter]
    public UserLoginDTO User { get; set; } = new();

    private string? errorMessage;
    private string? successMessage;

    private async Task OnValidSubmit()
    {
        try
        {
            var response = await _authService.Authenticate(User);
            if(response)
            {
                // TODO: Add a success message and redirect to appropriate page
                successMessage = $"You successfully logged in as {User.Email}!";
                //_navigationManager.NavigateTo("/");
            }
        }
        catch(Exception ex)
        {
            errorMessage = "Error, unable to log in";
            Console.WriteLine(ex.Message);
        }
    }
}