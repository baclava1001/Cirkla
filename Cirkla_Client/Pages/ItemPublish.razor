@page "/publishitem"
@using Cirkla_Client.Pages.Components;
@inject IClient _client;

<PageTitle>Publish new item</PageTitle>
<h3>Add new item</h3>
<hr />
<EditForm method="post" Model="Item" OnValidSubmit="OnValidSubmit" FormName="PublishItem">
    <DataAnnotationsValidator />
    <fieldset disabled="@IsPublishingItem">
        <div class="container">
            <div class="row mb-3">
                <label for="name" class="col-sm-2 col-form-label">Name </label>
                <div class="col-sm-10">
                    <InputText id="name" @bind-Value="Item.Name" class="form-control w-25" />
                    <ValidationMessage For="() => Item.Name" class="text-danger" />
                </div>
            </div>
                <CascadingValue Value="temporaryCategoryList">
                    <CascadingValue Value="Item">
                        <CategoryDropdown />
                    </CascadingValue>
                </CascadingValue>
            <div class="row mb-3">
                <label for="Model" class="col-sm-2 col-form-label">Model </label>
                <div class="col-sm-10">
                    <InputText id="model" @bind-Value="Item.Model" class="form-control w-25" placeholder="Maker, model and year, if applicable" />
                    <ValidationMessage For="() => Item.Model" class="text-danger" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="specifications" class="col-sm-2 col-form-label">Specifications </label>
                <div class="col-sm-10">
                    <InputTextArea id="specifications" @bind-Value="Item.Specifications" class="form-control-lg fs-6 w-25" rows="4" placeholder="Good to know technical details and characteristics" />
                    <ValidationMessage For="() => Item.Specifications" class="=text-danger" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="description" class="col-sm-2 col-form-label">Description </label>
                <div class="col-sm-10">
                    <InputTextArea id="description" @bind-Value="Item.Description" class="form-control-lg fs-6 w-25" rows="4" placeholder="General description" />
                    <ValidationMessage For="() => Item.Description" class="text-danger" />
                </div>
            </div>
            <CascadingValue Value="ItemPicture">
                <AddItemPicture OnPictureAdded="AddPictureToList" />
            </CascadingValue>
            <div class="row">
                <div class="col-sm-10 offset-sm-3">
                <input class="btn btn-secondary me-2" type="reset" value="Reset" />
                <button class="btn btn-primary me-2" type="button" @onclick="(() => OnValidSubmit())">Publish</button>
                </div>
            </div>
            <div class="d-flex align-items-center mb-3">
                @if (errorMessage is not null)
                {
                    <p class="text-danger">@errorMessage</p>
                }
                else
                {
                    <p class="text-success">@successMessage</p>
                }
            </div>
        </div>
    </fieldset>
</EditForm>
<div class="mb-3">
    @if (Item.Pictures is not null)
    {
        foreach(ItemPicture picture in Item.Pictures)
        {
            <img src="@picture.Url" class="img-fluid rounded" alt="Picture of @Item.Name" />
        }
    }
</div>


@code {

    // TODO: Later make Category a separate, prepopulated list in db

    [SupplyParameterFromForm]
    private Item Item { get; set; } = new();

    [CascadingParameter]
    public ItemPicture? ItemPicture { get; set; } = new();

    string[] temporaryCategoryList = ["Transportation", "Houshold & tools", "Accommodation", "Personal stuff", "Electronics", "Leisure & hobby"];

    public bool IsPublishingItem { get; set; }

    private string? errorMessage;
    private string? successMessage;


    private void AddPictureToList()
    {
        if (Item.Pictures is null)
        {
            Item.Pictures = new List<ItemPicture>();
        }

        if(ItemPicture is not null)
        {
            ItemPicture itemPicture = new();
            itemPicture.Url = ItemPicture.Url;
            Item.Pictures.Add(itemPicture);
        }
    }


    private async Task OnValidSubmit()
    {
        IsPublishingItem = true;

        try
        {
            Item.OwnerId = "54b5627b-1f8e-4634-8bb0-206fecc840f3"; //Samed's id
            await _client.ItemPOSTAsync(Item);
            await Task.Delay(500);
            errorMessage = null;
            successMessage = $"{Item.Name} published successfully";
            Item = new();
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            IsPublishingItem = false;
        }
    }
}