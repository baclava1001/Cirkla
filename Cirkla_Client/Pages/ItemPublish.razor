@page "/publishitem"
@using Cirkla_Client.Pages.Components;
@inject IClient _client;

<EditForm method="post" Model="Item" Disabled="@IsPublishingItem" OnValidSubmit="OnValidSubmit" FormName="PublishItem">
    <DataAnnotationsValidator />
        <h3>Add new item</h3>
        <hr/>
        <div class="mb-3">
            <label for="name" class="form-label">Name </label>
            <InputText id="name" @bind-Value="Item.Name" class="form-control" />
            <ValidationMessage For="() => Item.Name" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="category" class="form-label">Category </label>
            <InputText id="category" @bind-Value="Item.Category" class="form-control" />
            <ValidationMessage For="() => Item.Category" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="Model" class="form-label">Model </label>
            <InputText id="model" @bind-Value="Item.Model" class="form-control" />
            <ValidationMessage For="() => Item.Model" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="specifications" class="form-label">Specifications </label>
            <InputTextArea id="specifications" @bind-Value="Item.Specifications" class="form-control" />
            <ValidationMessage For="() => Item.Specifications" class="=text-danger" />
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description </label>
            <InputTextArea id="description" @bind-Value="Item.Description" class="form-control" />
            <ValidationMessage For="() => Item.Description" class="text-danger" />
        </div>
            <CascadingValue Value="ItemPicture">
                <AddItemPicture OnPictureAdded="AddPictureToList" />
            </CascadingValue>
        <div class="mb-3">
            <input class="btn btn-secondary" type="reset" value="Reset" />
            <button class="btn btn-primary" type="button" @onclick="(() => OnValidSubmit())">Publish</button>
        </div>
        <div class="mb-3">
            @if (errorMessage is not null)
            {
                <p class="text-danger">@errorMessage</p>
            }
            else
            {
                <p class="text-success">@successMessage</p>
            }
        </div>  
</EditForm>
<div class="mb-3">
    @if (Item.Pictures is not null)
    {
        foreach(ItemPicture picture in Item.Pictures)
        {
            <img src="@picture.Url" class="img-fluid rounded" alt="Picture of @Item.Name" />
        }
    }
</div>


@code {

    // TODO:
    // 1.Populate drop-down for Category
    // 2.Later make Category a separate, prepopulated class and populate a drop-down-meny with it.
    // 3.Add some greyed out text to guide user
    // 4.Add pictures property


    [SupplyParameterFromForm]
    private Item Item { get; set; } = new();

    [CascadingParameter]
    public ItemPicture? ItemPicture { get; set; } = new();

    public bool IsPublishingItem { get; set; }

    private string? errorMessage;
    private string? successMessage;


    private void AddPictureToList()
    {
        if (Item.Pictures is null)
        {
            Item.Pictures = new List<ItemPicture>();
        }

        if(ItemPicture is not null)
        {
            Item.Pictures.Add(ItemPicture);
        }
    }


    private async Task OnValidSubmit()
    {
        IsPublishingItem = true;

        try
        {
            Item.OwnerId = "b2162ceb-793d-4e32-8029-ca56472dd93a";
            await _client.ItemPOSTAsync(Item);
            await Task.Delay(500);
            errorMessage = null;
            successMessage = $"{Item.Name} published successfully";
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            IsPublishingItem = false;
        }
    }
}