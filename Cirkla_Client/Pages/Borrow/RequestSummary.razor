@page "/request/view"
@page "/request/review"
@inject IClient _client;
@inject NavigationManager _navigationManager;


<PageTitle>Request summary</PageTitle>
<h3>Request summary @_requestNumber</h3>
<hr />

<div>
    @if (Contract is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <img src="@Contract.Item.Pictures?.FirstOrDefault()?.Url" alt="Picture of @Contract?.Item?.Name" class="img-fluid" style="width: 350px; height: auto;" />
        <br />
        <br />
        <dl class="row">
            <dt class="col-sm-2">Cirkla member</dt>
            <dd class="col-sm-10">@Contract?.Borrower.FirstName @Contract?.Borrower.LastName</dd>
            <dt class="col-sm-2">Requests to borrow</dt>
            <dd class="col-sm-10">@Contract?.Item.Name @Contract?.Item.Model</dd>
            <dt class="col-sm-2">From Cirkla member</dt>
            <dd class="col-sm-10">@Contract?.Owner.FirstName @Contract?.Owner.LastName</dd>
            <dt class="col-sm-2">From</dt>
            <dd class="col-sm-10">@Contract?.StartTime</dd>
            <dt class="col-sm-2">To</dt>
            <dd class="col-sm-10">@Contract?.EndTime</dd>
            @* <dt class="col-sm-2">Under the following conditions</dt>
            <dd class="col-sm-10">(Coming feature, not yet implemented)</dd> *@
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">Request @Contract.StatusChanges.LastOrDefault().To.ToString().ToLower()</dd>

            @if (Contract?.StatusChanges?.LastOrDefault()?.To != ContractStatus.Accepted && Contract?.StatusChanges?.LastOrDefault()?.To != ContractStatus.Denied)
            {
                <ReplyToRequestButtons Contract="Contract" />
            }
        </dl>
    }
    @if(!string.IsNullOrEmpty(_tempMessage))
    {
        <p class="@_messageClass mt-3">@_tempMessage</p>
    }
</div>


@code {
    // TODO: Finalized contract (accepted and active, or archived or denied) should lead to another, more static view, with no controls

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public Contract? Contract { get; set; }

    private string? _route;
    private string? _requestNumber;
    private string? _tempMessage;
    private string? _messageClass;

    protected override async Task OnInitializedAsync()
    {
        await GetRequestDataFromApi();
        _route = await CaptureUrlRoute();
    }



    private async Task GetRequestDataFromApi()
    {
        try
        {
            Contract = await _client.ApiBorrowingContractViewRequestSummaryAsync(Id);
            _requestNumber = $"#{Contract.Id}";
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                _messageClass = "text-success";
                _tempMessage = "Here's the request!";
            }
            else if (ex.StatusCode == 404)
            {
                _navigationManager.NavigateTo("/notfound");
            }
            else
            {
                _messageClass = "text-danger";
                _tempMessage = ex.Message.ToString();
            }
        }
    }


    private async Task<string> CaptureUrlRoute()
    {
        var uri = new Uri(_navigationManager.Uri);
        string capturedRoute = uri.AbsolutePath;
        return capturedRoute;
    }
}

